/'
Use case: User wants to deactivate an existing account.
'/
@startuml
left to right direction
actor "User" as user
actor "System" as system

rectangle "Account Management System" {
  usecase "Deactivate Existing Account" as UC1
  usecase "Check Account Balance" as UC2
  usecase "Transfer Remaining Funds" as UC3
  usecase "Update Account Status" as UC4
  usecase "Record Deactivation Reason" as UC5
  usecase "Archive Account Data" as UC6
}

user --> UC1
UC1 ..> UC2 : <<include>>
UC1 ..> UC4 : <<include>>
UC1 ..> UC5 : <<include>>
UC2 ..> UC3 : <<extend>> <<if balance > 0>>
UC4 ..> UC6 : <<include>>

system --> UC2
system --> UC3
system --> UC4
system --> UC5
system --> UC6

note right of UC1
  User requests:
  - Deactivate account by ID
  - Provide reason for deactivation (optional)
  - Specify handling of remaining funds
end note

note right of UC2
  System:
  - Checks if account has non-zero balance
  - Warns user about remaining funds
  - Suggests transfer options if needed
end note

note right of UC3
  System:
  - Transfers remaining balance to another account
  - Creates transfer transaction record
  - Updates balances of both accounts
end note

note right of UC4
  System:
  - Sets account.active = FALSE
  - Records deactivation timestamp
  - Prevents new transactions on account
end note

note right of UC5
  System:
  - Stores deactivation reason
  - Categorizes reason for reporting
end note

note right of UC6
  System:
  - Preserves account history
  - Maintains transaction records
  - Ensures data available for reporting
end note

@enduml