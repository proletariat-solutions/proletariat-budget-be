/'
    Use case: User wants to delete an ingress.
    Actors: User
    Precondition: An ingress with given account and transaction details exists.
    Postcondition: The ingress is deleted and a new rollback transaction is created.
    Trigger: User deletes the ingress.
'/
@startuml
left to right direction
actor "User" as user
actor "System" as system

rectangle "Income Management System" {
  usecase "Delete Existing Ingress" as UC1
  usecase "Retrieve Ingress Details" as UC2
  usecase "Remove Ingress Tags" as UC3
  usecase "Create Rollback Transaction" as UC4
  usecase "Update Account Balance" as UC5
  usecase "Cancel Future Recurrences" as UC6
  usecase "Archive Ingress Data" as UC7
}

user --> UC1
UC1 ..> UC2 : <<include>>
UC1 ..> UC3 : <<include>>
UC1 ..> UC4 : <<include>>
UC1 ..> UC6 : <<extend>> <<if isRecurring>>
UC1 ..> UC7 : <<include>>
UC4 ..> UC5 : <<include>>

system --> UC2
system --> UC3
system --> UC4
system --> UC5
system --> UC6
system --> UC7

note right of UC1
  User requests:
  - Delete ingress by ID
  - Optional: Reason for deletion
end note

note right of UC2
  System:
  - Retrieves ingress amount
  - Identifies associated account
  - Gets transaction details
end note

note right of UC3
  System:
  - Removes all tag associations
  - Deletes from ingress_tags_junction
end note

note right of UC4
  System:
  - Creates reversal transaction
  - Records transaction timestamp
  - Links transaction to deletion event
end note

note right of UC5
  System:
  - Decreases account balance by ingress amount
  - Updates current balance
  - Records adjustment timestamp
end note

note right of UC6
  System:
  - Identifies recurring pattern
  - Cancels all future occurrences
  - Updates recurrence end date
end note

note right of UC7
  System:
  - Archives ingress data for audit
  - Records who deleted and when
  - Maintains historical record
end note

@enduml