/'
    Use case: User wants to modify an ingress.
    Actors: User
    Precondition: An ingress with given account and transaction details exists.
    Postcondition: The ingress is updated with the new details. If amount was changed, the fix transaction is recorded. If the account was changed, a new rollback transaction is created and the correct transaction is recorded.
    Trigger: User updates the ingress.
'/
@startuml
left to right direction
actor "User" as user
actor "System" as system

rectangle "Income Management System" {
  usecase "Update Existing Ingress" as UC1
  usecase "Retrieve Original Ingress" as UC2
  usecase "Validate Updated Data" as UC3
  usecase "Update Ingress Details" as UC4
  usecase "Handle Amount Change" as UC5
  usecase "Handle Account Change" as UC6
  usecase "Update Ingress Tags" as UC7
  usecase "Update Recurrence Pattern" as UC8
}

user --> UC1
UC1 ..> UC2 : <<include>>
UC1 ..> UC3 : <<include>>
UC1 ..> UC4 : <<include>>
UC1 ..> UC5 : <<extend>> <<if amount changed>>
UC1 ..> UC6 : <<extend>> <<if account changed>>
UC1 ..> UC7 : <<extend>> <<if tags changed>>
UC1 ..> UC8 : <<extend>> <<if recurrence changed>>

system --> UC2
system --> UC3
system --> UC4
system --> UC5
system --> UC6
system --> UC7
system --> UC8

note right of UC1
  User provides:
  - Ingress ID to update
  - Updated fields (amount, date, category, etc.)
  - New tags (if any)
  - Updated recurrence settings (if applicable)
end note

note right of UC2
  System:
  - Retrieves original ingress details
  - Gets original amount and account
  - Loads existing tags and recurrence pattern
end note

note right of UC3
  System validates:
  - Required fields are present
  - Amount is positive
  - Currency is valid
  - Category exists
  - Date is valid
end note

note right of UC4
  System:
  - Updates basic ingress details
  - Records update timestamp
  - Preserves original creation date
end note

note right of UC5
  System:
  - Calculates difference between amounts
  - Creates adjustment transaction
  - Updates account balance
  - Records transaction timestamp
end note

note right of UC6
  System:
  - Creates reversal transaction in original account
  - Creates new transaction in target account
  - Updates balances of both accounts
  - Links transactions to update event
end note

note right of UC7
  System:
  - Removes old tag associations
  - Creates new tag associations
  - Updates junction table entries
end note

note right of UC8
  System:
  - Updates recurrence frequency/interval
  - Adjusts end date if provided
  - Recalculates future occurrences
  - Handles changes to recurring status
end note

@enduml