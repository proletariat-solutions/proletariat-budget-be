/'
    Use case: User wants to create an ingress.
    Actors: User
    Precondition: The user has the necessary permissions to create an ingress. Optional: If tags are set, these should be already created.
    Postcondition: The ingress has been created successfully. Account balances increased and ingress transactions recorded.
    Trigger: User creates an ingress for given account
'/
@startuml
left to right direction
actor "User" as user
actor "System" as system

rectangle "Income Management System" {
  usecase "Create New Ingress" as UC1
  usecase "Validate Ingress Data" as UC2
  usecase "Create Ingress Transaction" as UC4
  usecase "Update Account Balance" as UC5
  usecase "Manage Ingress Tags" as UC6
  usecase "Handle Recurring Setup" as UC7
}

user --> UC1
UC1 ..> UC2 : <<include>>
UC1 ..> UC4 : <<include>>
UC1 ..> UC6 : <<include>>
UC1 ..> UC7 : <<extend>> <<if isRecurring>>
UC4 ..> UC5 : <<include>>

system --> UC2
system --> UC4
system --> UC5
system --> UC6
system --> UC7

note right of UC1
  User provides:
  - Amount
  - Currency
  - Category
  - Date
  - Description (optional)
  - Source (optional)
  - Tags (optional)
  - Recurring settings (optional)
end note

note right of UC2
  System validates:
  - Required fields are present
  - Amount is positive
  - Currency is valid
  - Category exists
  - Date is valid
end note

note right of UC4
  System:
  - Creates ingress record
  - Creates deposit transaction
  - Links transaction to ingress
end note

note right of UC5
  System:
  - Records transaction timestamp
  - Updates account balance
end note

note right of UC6
  System:
  - Validates provided tags
  - Associates tags with ingress
  - Creates entries in junction table
end note

note right of UC7
  System:
  - Sets up recurrence pattern and creates a cronjob
  - Stores frequency and interval
  - Schedules future occurrences
end note

@enduml