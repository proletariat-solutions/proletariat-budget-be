//go:build go1.22

// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for AccountType.
const (
	AccountTypeBank       AccountType = "bank"
	AccountTypeCash       AccountType = "cash"
	AccountTypeCrypto     AccountType = "crypto"
	AccountTypeInvestment AccountType = "investment"
	AccountTypeOther      AccountType = "other"
)

// Defines values for AccountRequestType.
const (
	AccountRequestTypeBank       AccountRequestType = "bank"
	AccountRequestTypeCash       AccountRequestType = "cash"
	AccountRequestTypeCrypto     AccountRequestType = "crypto"
	AccountRequestTypeInvestment AccountRequestType = "investment"
	AccountRequestTypeOther      AccountRequestType = "other"
)

// Defines values for CategoryType.
const (
	CategoryTypeExpenditure CategoryType = "expenditure"
	CategoryTypeIngress     CategoryType = "ingress"
	CategoryTypeSavingGoal  CategoryType = "savingGoal"
	CategoryTypeTransfer    CategoryType = "transfer"
)

// Defines values for ErrorCode.
const (
	ErrCodeConflict              ErrorCode = "Conflict"
	ErrCodeForbidden             ErrorCode = "Forbidden"
	ErrCodeNotFound              ErrorCode = "NotFound"
	ErrorCodeInternalServerError ErrorCode = "InternalServerError"
	ErrorCodeInvalidParameter    ErrorCode = "InvalidParameter"
	ErrorCodeNotAuthorized       ErrorCode = "NotAuthorized"
)

// Defines values for RecurrencePatternFrequency.
const (
	RecurrencePatternFrequencyDaily   RecurrencePatternFrequency = "daily"
	RecurrencePatternFrequencyMonthly RecurrencePatternFrequency = "monthly"
	RecurrencePatternFrequencyWeekly  RecurrencePatternFrequency = "weekly"
	RecurrencePatternFrequencyYearly  RecurrencePatternFrequency = "yearly"
)

// Defines values for RecurrencePatternRequestFrequency.
const (
	RecurrencePatternRequestFrequencyDaily   RecurrencePatternRequestFrequency = "daily"
	RecurrencePatternRequestFrequencyMonthly RecurrencePatternRequestFrequency = "monthly"
	RecurrencePatternRequestFrequencyWeekly  RecurrencePatternRequestFrequency = "weekly"
	RecurrencePatternRequestFrequencyYearly  RecurrencePatternRequestFrequency = "yearly"
)

// Defines values for SavingsGoalAutoContributeFrequency.
const (
	SavingsGoalAutoContributeFrequencyDaily   SavingsGoalAutoContributeFrequency = "daily"
	SavingsGoalAutoContributeFrequencyMonthly SavingsGoalAutoContributeFrequency = "monthly"
	SavingsGoalAutoContributeFrequencyWeekly  SavingsGoalAutoContributeFrequency = "weekly"
	SavingsGoalAutoContributeFrequencyYearly  SavingsGoalAutoContributeFrequency = "yearly"
)

// Defines values for SavingsGoalStatus.
const (
	SavingsGoalStatusAbandoned SavingsGoalStatus = "abandoned"
	SavingsGoalStatusActive    SavingsGoalStatus = "active"
	SavingsGoalStatusCompleted SavingsGoalStatus = "completed"
)

// Defines values for SavingsGoalRequestAutoContributeFrequency.
const (
	SavingsGoalRequestAutoContributeFrequencyDaily   SavingsGoalRequestAutoContributeFrequency = "daily"
	SavingsGoalRequestAutoContributeFrequencyMonthly SavingsGoalRequestAutoContributeFrequency = "monthly"
	SavingsGoalRequestAutoContributeFrequencyWeekly  SavingsGoalRequestAutoContributeFrequency = "weekly"
	SavingsGoalRequestAutoContributeFrequencyYearly  SavingsGoalRequestAutoContributeFrequency = "yearly"
)

// Defines values for SavingsProgressRecentActivityType.
const (
	SavingsProgressRecentActivityTypeContribution SavingsProgressRecentActivityType = "contribution"
	SavingsProgressRecentActivityTypeWithdrawal   SavingsProgressRecentActivityType = "withdrawal"
)

// Defines values for SavingsTransactionType.
const (
	SavingsTransactionTypeContribution SavingsTransactionType = "contribution"
	SavingsTransactionTypeWithdrawal   SavingsTransactionType = "withdrawal"
)

// Defines values for TagType.
const (
	TagTypeExpenditure         TagType = "expenditure"
	TagTypeIngress             TagType = "ingress"
	TagTypeSavingGoal          TagType = "saving_goal"
	TagTypeSavingsContribution TagType = "savings_contribution"
	TagTypeSavingsWithdrawal   TagType = "savings_withdrawal"
	TagTypeTransaction         TagType = "transaction"
	TagTypeTransfer            TagType = "transfer"
)

// Defines values for TransactionOriginalTransactionType.
const (
	TransactionOriginalTransactionTypeExpenditure TransactionOriginalTransactionType = "expenditure"
	TransactionOriginalTransactionTypeIngress     TransactionOriginalTransactionType = "ingress"
	TransactionOriginalTransactionTypeTransfer    TransactionOriginalTransactionType = "transfer"
)

// Defines values for TransactionRelatedEntityType.
const (
	TransactionRelatedEntityTypeExpenditure TransactionRelatedEntityType = "expenditure"
	TransactionRelatedEntityTypeIngress     TransactionRelatedEntityType = "ingress"
	TransactionRelatedEntityTypeTransfer    TransactionRelatedEntityType = "transfer"
)

// Defines values for TransactionStatus.
const (
	TransactionStatusCancelled TransactionStatus = "cancelled"
	TransactionStatusCompleted TransactionStatus = "completed"
	TransactionStatusFailed    TransactionStatus = "failed"
	TransactionStatusPending   TransactionStatus = "pending"
)

// Defines values for TransactionTransactionType.
const (
	TransactionTransactionTypeExpenditure TransactionTransactionType = "expenditure"
	TransactionTransactionTypeIngress     TransactionTransactionType = "ingress"
	TransactionTransactionTypeRollback    TransactionTransactionType = "rollback"
	TransactionTransactionTypeTransfer    TransactionTransactionType = "transfer"
)

// Defines values for TransferStatus.
const (
	TransferStatusCancelled TransferStatus = "cancelled"
	TransferStatusCompleted TransferStatus = "completed"
	TransferStatusFailed    TransferStatus = "failed"
	TransferStatusPending   TransferStatus = "pending"
)

// Defines values for GetBalancesParamsGroupBy.
const (
	GetBalancesParamsGroupByAccount  GetBalancesParamsGroupBy = "account"
	GetBalancesParamsGroupByCurrency GetBalancesParamsGroupBy = "currency"
	GetBalancesParamsGroupByType     GetBalancesParamsGroupBy = "type"
)

// Defines values for ListSavingsGoalsParamsStatus.
const (
	ListSavingsGoalsParamsStatusAbandoned ListSavingsGoalsParamsStatus = "abandoned"
	ListSavingsGoalsParamsStatusActive    ListSavingsGoalsParamsStatus = "active"
	ListSavingsGoalsParamsStatusCompleted ListSavingsGoalsParamsStatus = "completed"
)

// Defines values for ListSavingsTransactionsParamsType.
const (
	Contribution ListSavingsTransactionsParamsType = "contribution"
	Withdrawal   ListSavingsTransactionsParamsType = "withdrawal"
)

// Defines values for ListTransactionsParamsTransactionType.
const (
	ListTransactionsParamsTransactionTypeExpenditure         ListTransactionsParamsTransactionType = "expenditure"
	ListTransactionsParamsTransactionTypeIngress             ListTransactionsParamsTransactionType = "ingress"
	ListTransactionsParamsTransactionTypeSavingsContribution ListTransactionsParamsTransactionType = "savings_contribution"
	ListTransactionsParamsTransactionTypeSavingsWithdrawal   ListTransactionsParamsTransactionType = "savings_withdrawal"
	ListTransactionsParamsTransactionTypeTransfer            ListTransactionsParamsTransactionType = "transfer"
)

// Account defines model for Account.
type Account struct {
	// AccountInformation Plain text field containing account information
	AccountInformation *string `json:"accountInformation,omitempty"`

	// AccountNumber Last 4 digits or masked account number (for reference only)
	AccountNumber *string `json:"accountNumber,omitempty"`

	// Active Whether the account is active
	Active *bool `json:"active,omitempty"`

	// CreatedAt Timestamp when the account was created
	CreatedAt time.Time `json:"createdAt"`

	// Currency Primary currency of the account
	Currency string `json:"currency"`

	// CurrentBalance Current balance of the account
	CurrentBalance float32 `json:"currentBalance"`

	// Description Additional details about the account
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the account
	Id string `json:"id"`

	// InitialBalance Initial balance when creating the account
	InitialBalance float32 `json:"initialBalance"`

	// Institution Financial institution name (if applicable)
	Institution *string `json:"institution,omitempty"`

	// Name Name of the account
	Name  string           `json:"name"`
	Owner *HouseholdMember `json:"owner,omitempty"`

	// Type Type of account
	Type AccountType `json:"type"`

	// UpdatedAt Timestamp when the account was last updated
	UpdatedAt time.Time `json:"updatedAt"`
}

// AccountType Type of account
type AccountType string

// AccountList defines model for AccountList.
type AccountList struct {
	Accounts *[]Account    `json:"accounts,omitempty"`
	Metadata *ListMetadata `json:"metadata,omitempty"`
}

// AccountRequest defines model for AccountRequest.
type AccountRequest struct {
	// AccountInformation Plain text field containing account information
	AccountInformation *string `json:"accountInformation,omitempty"`

	// AccountNumber Last 4 digits or masked account number (for reference only)
	AccountNumber *string `json:"accountNumber,omitempty"`

	// Active Whether the account is active
	Active *bool `json:"active,omitempty"`

	// Currency Primary currency of the account
	Currency string `json:"currency"`

	// Description Additional details about the account
	Description *string `json:"description,omitempty"`

	// InitialBalance Initial balance when creating the account
	InitialBalance float32 `json:"initialBalance"`

	// Institution Financial institution name (if applicable)
	Institution *string `json:"institution,omitempty"`

	// Name Name of the account
	Name  string           `json:"name"`
	Owner *HouseholdMember `json:"owner,omitempty"`

	// Type Type of account
	Type AccountRequestType `json:"type"`
}

// AccountRequestType Type of account
type AccountRequestType string

// BalanceSummary defines model for BalanceSummary.
type BalanceSummary struct {
	Accounts []struct {
		// AccountId Account ID
		AccountId *string `json:"accountId,omitempty"`

		// Balance Current balance
		Balance *float32 `json:"balance,omitempty"`

		// ConvertedBalance Balance converted to requested currency
		ConvertedBalance *float32 `json:"convertedBalance,omitempty"`

		// Currency Account currency
		Currency *string `json:"currency,omitempty"`

		// Name Account name
		Name *string `json:"name,omitempty"`

		// Type Account type
		Type *string `json:"type,omitempty"`
	} `json:"accounts"`

	// Currency Currency of the total balance
	Currency        string `json:"currency"`
	GroupedBalances *[]struct {
		// GroupKey Grouping key (currency, type, etc.)
		GroupKey *string `json:"groupKey,omitempty"`

		// Percentage Percentage of total balance
		Percentage *float32 `json:"percentage,omitempty"`

		// TotalAmount Total amount for this group
		TotalAmount *float32 `json:"totalAmount,omitempty"`
	} `json:"groupedBalances,omitempty"`

	// TotalBalance Total balance across all accounts
	TotalBalance float32 `json:"totalBalance"`
}

// CanDelete defines model for CanDelete.
type CanDelete struct {
	// CanDelete Whether the entity can be deleted
	CanDelete bool `json:"canDelete"`

	// Reason Explanation when deletion is not allowed
	Reason *string `json:"reason"`
}

// Category defines model for Category.
type Category struct {
	// Active Whether the category is active
	Active *bool `json:"active,omitempty"`

	// BackgroundColor Background color code for UI representation (hex format)
	BackgroundColor *string       `json:"backgroundColor,omitempty"`
	CategoryType    *CategoryType `json:"categoryType,omitempty"`

	// Color Color code for UI representation (hex format)
	Color *string `json:"color,omitempty"`

	// Description Description of the category
	Description string `json:"description"`

	// Id Unique identifier for the category
	Id string `json:"id"`

	// Name Name of the category
	Name string `json:"name"`
}

// CategoryRequest defines model for CategoryRequest.
type CategoryRequest struct {
	// BackgroundColor Background color code for UI representation (hex format)
	BackgroundColor *string       `json:"backgroundColor,omitempty"`
	CategoryType    *CategoryType `json:"categoryType,omitempty"`

	// Color Color code for UI representation (hex format)
	Color *string `json:"color,omitempty"`

	// Description Description of the category
	Description string `json:"description"`

	// Name Name of the category
	Name string `json:"name"`
}

// CategoryType defines model for CategoryType.
type CategoryType string

// Error defines model for Error.
type Error struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

// ErrorCode defines model for ErrorCode.
type ErrorCode string

// ExchangeRates defines model for ExchangeRates.
type ExchangeRates struct {
	// BaseCurrency Base currency for the rates
	BaseCurrency string `json:"baseCurrency"`

	// Date Date of the exchange rates
	Date openapi_types.Date `json:"date"`

	// Rates Exchange rates for different currencies
	Rates map[string]float32 `json:"rates"`
}

// Expenditure defines model for Expenditure.
type Expenditure struct {
	// AccountId The account ID this expenditure is associated with
	AccountId string `json:"accountId"`

	// Amount The expenditure amount
	Amount   float32  `json:"amount"`
	Category Category `json:"category"`

	// CreatedAt Timestamp when the expenditure was created
	CreatedAt time.Time `json:"createdAt"`

	// Currency ID of the currency used for the expenditure
	Currency string `json:"currency"`

	// Date The date of the expenditure
	Date openapi_types.Date `json:"date"`

	// Declared Whether the expenditure has been fiscally declared
	Declared *bool `json:"declared,omitempty"`

	// Description The description of the expenditure
	Description string `json:"description"`

	// Id Unique identifier for the expenditure
	Id string `json:"id"`

	// Planned Whether the expenditure is planned or non-planned
	Planned *bool `json:"planned,omitempty"`

	// Tags List of tag IDs associated with this expenditure
	Tags *[]Tag `json:"tags,omitempty"`

	// UpdatedAt Timestamp when the expenditure was last updated
	UpdatedAt time.Time `json:"updatedAt"`
}

// ExpenditureList defines model for ExpenditureList.
type ExpenditureList struct {
	Expenditures *[]Expenditure `json:"expenditures,omitempty"`
	Metadata     *ListMetadata  `json:"metadata,omitempty"`
}

// ExpenditureRequest defines model for ExpenditureRequest.
type ExpenditureRequest struct {
	// AccountId The account ID this expenditure is associated with
	AccountId string `json:"accountId"`

	// Amount The expenditure amount
	Amount   float32  `json:"amount"`
	Category Category `json:"category"`

	// Currency ID of the currency used for the expenditure
	Currency string `json:"currency"`

	// Date The date of the expenditure
	Date openapi_types.Date `json:"date"`

	// Declared Whether the expenditure has been fiscally declared
	Declared *bool `json:"declared,omitempty"`

	// Description The description of the expenditure
	Description string `json:"description"`

	// Planned Whether the expenditure is planned or non-planned
	Planned *bool `json:"planned,omitempty"`

	// Tags List of tag IDs associated with this expenditure
	Tags *[]Tag `json:"tags,omitempty"`
}

// HouseholdMember defines model for HouseholdMember.
type HouseholdMember struct {
	// Active Whether the household member is currently active in budget planning
	Active *bool `json:"active,omitempty"`

	// CreatedAt Timestamp when the record was created
	CreatedAt time.Time `json:"createdAt"`

	// FirstName First name of the household member
	FirstName string `json:"firstName"`

	// Id Unique identifier for the household member
	Id string `json:"id"`

	// LastName Last name of the household member
	LastName string `json:"lastName"`

	// Nickname Nickname or preferred name of the household member
	Nickname *string `json:"nickname,omitempty"`

	// Role Role in the household (e.g., parent, child, roommate)
	Role string `json:"role"`

	// UpdatedAt Timestamp when the record was last updated
	UpdatedAt time.Time `json:"updatedAt"`
}

// HouseholdMemberList defines model for HouseholdMemberList.
type HouseholdMemberList struct {
	// Members List of household members
	Members *[]HouseholdMember `json:"members,omitempty"`
}

// HouseholdMemberRequest defines model for HouseholdMemberRequest.
type HouseholdMemberRequest struct {
	// Active Whether the household member is currently active in budget planning
	Active *bool `json:"active,omitempty"`

	// FirstName First name of the household member
	FirstName string `json:"firstName"`

	// LastName Last name of the household member
	LastName string `json:"lastName"`

	// Nickname Nickname or preferred name of the household member
	Nickname *string `json:"nickname,omitempty"`

	// Role Role in the household (e.g., parent, child, roommate)
	Role string `json:"role"`
}

// Ingress defines model for Ingress.
type Ingress struct {
	// AccountId The ID of the account this ingress belongs to
	AccountId string `json:"accountId"`

	// Amount The ingress amount
	Amount   float32  `json:"amount"`
	Category Category `json:"category"`

	// CreatedAt The timestamp when the ingress was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Currency The currency of the ingress
	Currency string `json:"currency"`

	// Date The date of the ingress
	Date openapi_types.Date `json:"date"`

	// Description Additional details about the ingress
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the ingress
	Id                string             `json:"id"`
	RecurrencePattern *RecurrencePattern `json:"recurrencePattern,omitempty"`

	// Source The source of the income
	Source *string `json:"source,omitempty"`

	// Tags List of tag IDs associated with this ingress
	Tags *[]Tag `json:"tags,omitempty"`
}

// IngressList defines model for IngressList.
type IngressList struct {
	Incomes  *[]Ingress    `json:"incomes,omitempty"`
	Metadata *ListMetadata `json:"metadata,omitempty"`
}

// IngressRequest defines model for IngressRequest.
type IngressRequest struct {
	// AccountId The ID of the account this ingress belongs to
	AccountId string `json:"accountId"`

	// Amount The ingress amount
	Amount   float32  `json:"amount"`
	Category Category `json:"category"`

	// CreatedAt The timestamp when the ingress was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Currency The currency of the ingress
	Currency string `json:"currency"`

	// Date The date of the ingress
	Date openapi_types.Date `json:"date"`

	// Description Additional details about the ingress
	Description       *string            `json:"description,omitempty"`
	RecurrencePattern *RecurrencePattern `json:"recurrencePattern,omitempty"`

	// Source The source of the income
	Source *string `json:"source,omitempty"`

	// Tags List of tag IDs associated with this ingress
	Tags *[]Tag `json:"tags,omitempty"`
}

// ListMetadata defines model for ListMetadata.
type ListMetadata struct {
	// Limit Limit used for the query
	Limit int `json:"limit"`

	// Offset Offset used for the query
	Offset int `json:"offset"`

	// Total Total number of elements matching the filter criteria
	Total int `json:"total"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
	Token     *string    `json:"token,omitempty"`
	User      *User      `json:"user,omitempty"`
}

// RecurrencePattern defines model for RecurrencePattern.
type RecurrencePattern struct {
	// Amount Amount for each recurrence
	Amount float32 `json:"amount"`

	// CreatedAt When the recurrence pattern was created
	CreatedAt time.Time `json:"created_at"`

	// Description Description for the recurrence pattern
	Description string `json:"description"`

	// EndDate End date for the recurrence pattern (null for indefinite)
	EndDate *openapi_types.Date `json:"end_date"`

	// Frequency Frequency of the recurrence
	Frequency RecurrencePatternFrequency `json:"frequency"`

	// Id Unique identifier for the recurrence pattern
	Id string `json:"id"`

	// Interval Interval value for the frequency (e.g., every 2 weeks)
	Interval int `json:"interval"`

	// ToAccountId ID of the associated ingress
	ToAccountId string `json:"to_account_id"`

	// UpdatedAt When the recurrence pattern was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// RecurrencePatternFrequency Frequency of the recurrence
type RecurrencePatternFrequency string

// RecurrencePatternRequest defines model for RecurrencePatternRequest.
type RecurrencePatternRequest struct {
	// Amount Amount for each recurrence
	Amount float32 `json:"amount"`

	// Description Description for the recurrence pattern
	Description string `json:"description"`

	// EndDate End date for the recurrence pattern (null for indefinite)
	EndDate *openapi_types.Date `json:"end_date"`

	// Frequency Frequency of the recurrence
	Frequency RecurrencePatternRequestFrequency `json:"frequency"`

	// Interval Interval value for the frequency (e.g., every 2 weeks)
	Interval int `json:"interval"`

	// ToAccountId ID of the associated ingress
	ToAccountId string `json:"to_account_id"`
}

// RecurrencePatternRequestFrequency Frequency of the recurrence
type RecurrencePatternRequestFrequency string

// RollbackRequest defines model for RollbackRequest.
type RollbackRequest struct {
	// RollbackReason Reason for rolling back the Expenditure
	RollbackReason string `json:"rollbackReason"`
}

// SavingsContribution defines model for SavingsContribution.
type SavingsContribution struct {
	// Amount The contribution amount
	Amount float32 `json:"amount"`

	// CreatedAt Timestamp when the contribution was created
	CreatedAt time.Time `json:"createdAt"`

	// Date The date of the contribution
	Date openapi_types.Date `json:"date"`

	// Id Unique identifier for the contribution
	Id string `json:"id"`

	// Notes Additional notes about the contribution
	Notes *string `json:"notes,omitempty"`

	// SavingsGoalId ID of the savings goal this contribution belongs to
	SavingsGoalId string `json:"savingsGoalId"`

	// SourceAccountId ID of the account the contribution is coming from
	SourceAccountId string `json:"sourceAccountId"`

	// Tags List of tag IDs associated with this contribution
	Tags *[]Tag `json:"tags,omitempty"`

	// UpdatedAt Timestamp when the contribution was last updated
	UpdatedAt time.Time `json:"updatedAt"`
}

// SavingsContributionRequest defines model for SavingsContributionRequest.
type SavingsContributionRequest struct {
	// Amount The contribution amount
	Amount float32 `json:"amount"`

	// Date The date of the contribution
	Date openapi_types.Date `json:"date"`

	// Notes Additional notes about the contribution
	Notes *string `json:"notes,omitempty"`

	// SourceAccountId ID of the account the contribution is coming from
	SourceAccountId string `json:"sourceAccountId"`

	// Tags List of tag IDs associated with this contribution
	Tags *[]Tag `json:"tags,omitempty"`
}

// SavingsGoal defines model for SavingsGoal.
type SavingsGoal struct {
	// AccountId ID of the account where funds are stored
	AccountId string `json:"accountId"`

	// AutoContribute Whether to automatically contribute to this goal
	AutoContribute *bool `json:"autoContribute,omitempty"`

	// AutoContributeAmount Amount to auto-contribute periodically
	AutoContributeAmount *float32 `json:"autoContributeAmount,omitempty"`

	// AutoContributeFrequency Frequency of auto-contributions
	AutoContributeFrequency *SavingsGoalAutoContributeFrequency `json:"autoContributeFrequency,omitempty"`
	Category                Category                            `json:"category"`

	// CreatedAt Timestamp when the savings goal was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Currency Currency of the savings goal
	Currency string `json:"currency"`

	// CurrentAmount Current amount saved
	CurrentAmount *float32 `json:"currentAmount,omitempty"`

	// Description Detailed description of the savings goal
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the savings goal
	Id *string `json:"id,omitempty"`

	// InitialAmount Initial amount already saved
	InitialAmount *float32 `json:"initialAmount,omitempty"`

	// Name Name of the savings goal
	Name string `json:"name"`

	// PercentComplete Percentage of goal completed
	PercentComplete *float32 `json:"percentComplete,omitempty"`

	// Priority Priority level (1-5, where 1 is highest)
	Priority *int `json:"priority,omitempty"`

	// ProjectedCompletionDate Estimated completion date based on contribution history
	ProjectedCompletionDate *openapi_types.Date `json:"projectedCompletionDate,omitempty"`

	// Status Current status of the savings goal
	Status *SavingsGoalStatus `json:"status,omitempty"`

	// Tags List of tag IDs associated with this goal
	Tags *[]Tag `json:"tags,omitempty"`

	// TargetAmount Target amount to save
	TargetAmount float32 `json:"targetAmount"`

	// TargetDate Target date to reach the goal (optional)
	TargetDate *openapi_types.Date `json:"targetDate,omitempty"`
	UpdatedAt  *time.Time          `json:"updatedAt,omitempty"`
}

// SavingsGoalAutoContributeFrequency Frequency of auto-contributions
type SavingsGoalAutoContributeFrequency string

// SavingsGoalStatus Current status of the savings goal
type SavingsGoalStatus string

// SavingsGoalList defines model for SavingsGoalList.
type SavingsGoalList struct {
	Metadata     *ListMetadata  `json:"metadata,omitempty"`
	SavingsGoals *[]SavingsGoal `json:"savingsGoals,omitempty"`
}

// SavingsGoalRequest defines model for SavingsGoalRequest.
type SavingsGoalRequest struct {
	// AccountId ID of the account where funds are stored
	AccountId string `json:"accountId"`

	// AutoContribute Whether to automatically contribute to this goal
	AutoContribute *bool `json:"autoContribute,omitempty"`

	// AutoContributeAmount Amount to auto-contribute periodically
	AutoContributeAmount *float32 `json:"autoContributeAmount,omitempty"`

	// AutoContributeFrequency Frequency of auto-contributions
	AutoContributeFrequency *SavingsGoalRequestAutoContributeFrequency `json:"autoContributeFrequency,omitempty"`
	Category                Category                                   `json:"category"`

	// Currency Currency of the savings goal
	Currency string `json:"currency"`

	// Description Detailed description of the savings goal
	Description *string `json:"description,omitempty"`

	// InitialAmount Initial amount already saved
	InitialAmount *float32 `json:"initialAmount,omitempty"`

	// Name Name of the savings goal
	Name string `json:"name"`

	// Priority Priority level (1-5, where 1 is highest)
	Priority *int `json:"priority,omitempty"`

	// Tags List of tag IDs associated with this goal
	Tags *[]Tag `json:"tags,omitempty"`

	// TargetAmount Target amount to save
	TargetAmount float32 `json:"targetAmount"`

	// TargetDate Target date to reach the goal (optional)
	TargetDate *openapi_types.Date `json:"targetDate,omitempty"`
}

// SavingsGoalRequestAutoContributeFrequency Frequency of auto-contributions
type SavingsGoalRequestAutoContributeFrequency string

// SavingsProgress defines model for SavingsProgress.
type SavingsProgress struct {
	ContributionHistory *[]struct {
		// Amount Total contributions for that month
		Amount *float32 `json:"amount,omitempty"`

		// Month Month of contributions (YYYY-MM format)
		Month *openapi_types.Date `json:"month,omitempty"`
	} `json:"contributionHistory,omitempty"`

	// Currency Currency of the savings goal
	Currency string `json:"currency"`

	// CurrentAmount Current amount saved
	CurrentAmount float32 `json:"currentAmount"`

	// DaysRemaining Number of days remaining until target date
	DaysRemaining *int `json:"daysRemaining,omitempty"`

	// GoalId ID of the savings goal
	GoalId string `json:"goalId"`

	// Name Name of the savings goal
	Name string `json:"name"`

	// OnTrack Whether the goal is on track to be completed by target date
	OnTrack *bool `json:"onTrack,omitempty"`

	// PercentComplete Percentage of goal completed
	PercentComplete float32 `json:"percentComplete"`

	// ProjectedCompletionDate Projected date when goal will be reached based on current rate
	ProjectedCompletionDate *openapi_types.Date `json:"projectedCompletionDate,omitempty"`
	RecentActivity          *[]struct {
		// Amount Amount of activity
		Amount *float32 `json:"amount,omitempty"`

		// Date Date of activity
		Date *openapi_types.Date `json:"date,omitempty"`

		// Description Description of activity
		Description *string `json:"description,omitempty"`

		// Type Type of activity
		Type *SavingsProgressRecentActivityType `json:"type,omitempty"`
	} `json:"recentActivity,omitempty"`

	// RemainingAmount Amount still needed to reach goal
	RemainingAmount float32 `json:"remainingAmount"`

	// TargetAmount Target amount to save
	TargetAmount float32 `json:"targetAmount"`

	// TargetDate Target date to reach the goal
	TargetDate *openapi_types.Date `json:"targetDate,omitempty"`
}

// SavingsProgressRecentActivityType Type of activity
type SavingsProgressRecentActivityType string

// SavingsTransaction defines model for SavingsTransaction.
type SavingsTransaction struct {
	// AccountId ID of the account from/to which the money was transferred
	AccountId *string `json:"accountId,omitempty"`

	// Amount Amount of the transaction
	Amount float32 `json:"amount"`

	// Date Date and time when the transaction occurred
	Date time.Time `json:"date"`

	// Description Optional description of the transaction
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the transaction
	Id string `json:"id"`

	// SavingsGoalId ID of the savings goal this transaction belongs to
	SavingsGoalId string `json:"savingsGoalId"`

	// Tags List of tag IDs associated with this transaction
	Tags *[]Tag `json:"tags,omitempty"`

	// TransactionId ID of the related financial transaction (if applicable)
	TransactionId *string `json:"transactionId,omitempty"`

	// Type Type of transaction
	Type SavingsTransactionType `json:"type"`
}

// SavingsTransactionType Type of transaction
type SavingsTransactionType string

// SavingsTransactionList defines model for SavingsTransactionList.
type SavingsTransactionList struct {
	Metadata     *ListMetadata        `json:"metadata,omitempty"`
	Transactions []SavingsTransaction `json:"transactions"`
}

// SavingsWithdrawal defines model for SavingsWithdrawal.
type SavingsWithdrawal struct {
	// Amount The withdrawal amount
	Amount float32 `json:"amount"`

	// CreatedAt Timestamp when the withdrawal was created
	CreatedAt time.Time `json:"createdAt"`

	// Date The date of the withdrawal
	Date openapi_types.Date `json:"date"`

	// DestinationAccountId ID of the account the withdrawal is going to
	DestinationAccountId string `json:"destinationAccountId"`

	// Id Unique identifier for the withdrawal
	Id string `json:"id"`

	// Notes Additional notes about the withdrawal
	Notes *string `json:"notes,omitempty"`

	// Reason Reason for the withdrawal
	Reason string `json:"reason"`

	// SavingsGoalId ID of the savings goal this withdrawal belongs to
	SavingsGoalId string `json:"savingsGoalId"`

	// Tags List of tags associated with this withdrawal
	Tags *[]Tag `json:"tags,omitempty"`

	// UpdatedAt Timestamp when the withdrawal was last updated
	UpdatedAt time.Time `json:"updatedAt"`
}

// SavingsWithdrawalRequest defines model for SavingsWithdrawalRequest.
type SavingsWithdrawalRequest struct {
	// Amount The withdrawal amount
	Amount float32 `json:"amount"`

	// Date The date of the withdrawal
	Date openapi_types.Date `json:"date"`

	// DestinationAccountId ID of the account the withdrawal is going to
	DestinationAccountId string `json:"destinationAccountId"`

	// Notes Additional notes about the withdrawal
	Notes *string `json:"notes,omitempty"`

	// Reason Reason for the withdrawal
	Reason string `json:"reason"`

	// Tags List of tags associated with this withdrawal
	Tags *[]Tag `json:"tags,omitempty"`
}

// Tag defines model for Tag.
type Tag struct {
	// BackgroundColor Background color code for UI representation (hex format)
	BackgroundColor *string `json:"backgroundColor,omitempty"`

	// Color Text color code for UI representation (hex format)
	Color *string `json:"color,omitempty"`

	// CreatedAt Timestamp when the tag was created
	CreatedAt time.Time `json:"createdAt"`

	// Description Description of the tag
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the tag
	Id string `json:"id"`

	// Name Name of the tag
	Name    string  `json:"name"`
	TagType TagType `json:"tagType"`

	// UpdatedAt Timestamp when the tag was last updated
	UpdatedAt time.Time `json:"updatedAt"`
}

// TagRequest defines model for TagRequest.
type TagRequest struct {
	// BackgroundColor Background color code for UI representation (hex format)
	BackgroundColor *string `json:"backgroundColor,omitempty"`

	// Color Text color code for UI representation (hex format)
	Color *string `json:"color,omitempty"`

	// Description Description of the tag
	Description *string `json:"description,omitempty"`

	// Name Name of the tag
	Name    string  `json:"name"`
	TagType TagType `json:"tagType"`
}

// TagType defines model for TagType.
type TagType string

// Transaction defines model for Transaction.
type Transaction struct {
	// BalanceAfter Account balance after the transaction (for the primary account)
	BalanceAfter *float32 `json:"balanceAfter,omitempty"`

	// Credit Amount credited (positive value)
	Credit *float32 `json:"credit"`

	// Currency Currency of the transaction
	Currency string `json:"currency"`

	// Date Date and time when the transaction occurred
	Date time.Time `json:"date"`

	// Debit Amount debited (negative value)
	Debit *float32 `json:"debit"`

	// Description Description of the transaction
	Description string `json:"description"`

	// Fees Any fees associated with the transaction
	Fees *float32 `json:"fees,omitempty"`

	// FromAccountId Source account ID (for transfers, expenditures, savings withdrawals)
	FromAccountId *string `json:"fromAccountId"`

	// Id Unique identifier for the transaction
	Id string `json:"id"`

	// OriginalTransactionId ID of the original transaction (for rollbacks)
	OriginalTransactionId *string `json:"originalTransactionId"`

	// OriginalTransactionType Type of the original transaction (for rollbacks)
	OriginalTransactionType *TransactionOriginalTransactionType `json:"originalTransactionType"`

	// RelatedEntityId ID of the related entity (expenditure, ingress, transfer, savings goal)
	RelatedEntityId *string `json:"relatedEntityId"`

	// RelatedEntityType Type of the related entity
	RelatedEntityType *TransactionRelatedEntityType `json:"relatedEntityType"`

	// RollbackReason Reason for the rollback
	RollbackReason *string `json:"rollbackReason"`

	// Status Status of the transaction
	Status TransactionStatus `json:"status"`

	// Tags List of tag IDs associated with this transaction
	Tags *[]Tag `json:"tags,omitempty"`

	// ToAccountId Destination account ID (for transfers, ingresses, savings contributions)
	ToAccountId *string `json:"toAccountId"`

	// TransactionType Type of transaction
	TransactionType TransactionTransactionType `json:"transactionType"`
}

// TransactionOriginalTransactionType Type of the original transaction (for rollbacks)
type TransactionOriginalTransactionType string

// TransactionRelatedEntityType Type of the related entity
type TransactionRelatedEntityType string

// TransactionStatus Status of the transaction
type TransactionStatus string

// TransactionTransactionType Type of transaction
type TransactionTransactionType string

// TransactionList defines model for TransactionList.
type TransactionList struct {
	Metadata     ListMetadata  `json:"metadata"`
	Transactions []Transaction `json:"transactions"`
}

// Transfer defines model for Transfer.
type Transfer struct {
	// Date Date of the transfer
	Date openapi_types.Date `json:"date"`

	// Description Additional details about the transfer
	Description *string `json:"description,omitempty"`

	// DestinationAccountId ID of the destination account
	DestinationAccountId string `json:"destinationAccountId"`

	// DestinationAmount Amount to be received at destination (for currency conversions)
	DestinationAmount *float32 `json:"destinationAmount,omitempty"`

	// DestinationCurrencyId ID of the destination currency
	DestinationCurrencyId *string `json:"destinationCurrencyId,omitempty"`

	// ExchangeRate Exchange rate used for currency conversion
	ExchangeRate *float32 `json:"exchangeRate,omitempty"`

	// Fees Any fees associated with the transfer
	Fees *float32 `json:"fees,omitempty"`

	// Id Unique identifier for the transfer
	Id string `json:"id"`

	// SourceAccountId ID of the source account
	SourceAccountId string `json:"sourceAccountId"`

	// SourceAmount Amount to transfer from source account
	SourceAmount *float32 `json:"sourceAmount,omitempty"`

	// SourceCurrencyId ID of the source currency
	SourceCurrencyId *string `json:"sourceCurrencyId,omitempty"`

	// Status Status of the transfer
	Status TransferStatus `json:"status"`
}

// TransferStatus Status of the transfer
type TransferStatus string

// TransferList defines model for TransferList.
type TransferList struct {
	Metadata  *ListMetadata `json:"metadata,omitempty"`
	Transfers *[]Transfer   `json:"transfers,omitempty"`
}

// TransferRequest defines model for TransferRequest.
type TransferRequest struct {
	// Date Date of the transfer
	Date openapi_types.Date `json:"date"`

	// Description Additional details about the transfer
	Description *string `json:"description,omitempty"`

	// DestinationAccountId ID of the destination account
	DestinationAccountId string `json:"destinationAccountId"`

	// DestinationAmount Amount to be received at destination (for currency conversions)
	DestinationAmount *float32 `json:"destinationAmount,omitempty"`

	// DestinationCurrencyId ID of the destination currency
	DestinationCurrencyId *string `json:"destinationCurrencyId,omitempty"`

	// ExchangeRate Exchange rate used for currency conversion
	ExchangeRate *float32 `json:"exchangeRate,omitempty"`

	// Fees Any fees associated with the transfer
	Fees *float32 `json:"fees,omitempty"`

	// SourceAccountId ID of the source account
	SourceAccountId string `json:"sourceAccountId"`

	// SourceAmount Amount to transfer from source account
	SourceAmount *float32 `json:"sourceAmount,omitempty"`

	// SourceCurrencyId ID of the source currency
	SourceCurrencyId *string `json:"sourceCurrencyId,omitempty"`
}

// User defines model for User.
type User struct {
	// CreatedAt When the user account was created
	CreatedAt time.Time `json:"createdAt"`

	// Email User's email address
	Email openapi_types.Email `json:"email"`

	// FirstName User's first name
	FirstName string `json:"firstName"`

	// Id Unique identifier for the user
	Id string `json:"id"`

	// LastName User's last name
	LastName string `json:"lastName"`

	// UpdatedAt When the user account was last updated
	UpdatedAt time.Time `json:"updatedAt"`
}

// N400 defines model for 400.
type N400 = Error

// N404 defines model for 404.
type N404 = Error

// N409 defines model for 409.
type N409 = Error

// N500 defines model for 500.
type N500 = Error

// ListAccountsParams defines parameters for ListAccounts.
type ListAccountsParams struct {
	// Type Filter by account type (bank, cash, platform)
	Type *string `form:"type,omitempty" json:"type,omitempty"`

	// Currency Filter by currency
	Currency *string `form:"currency,omitempty" json:"currency,omitempty"`

	// Active Filter by active status
	Active *bool `form:"active,omitempty" json:"active,omitempty"`

	// Limit Limit the number of results
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset the result set
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// RegisterUserJSONBody defines parameters for RegisterUser.
type RegisterUserJSONBody struct {
	// Email User's email address
	Email openapi_types.Email `json:"email"`

	// FirstName User's first name
	FirstName string `json:"firstName"`

	// LastName User's last name
	LastName string `json:"lastName"`

	// Password User's password
	Password string `json:"password"`
}

// GetBalancesParams defines parameters for GetBalances.
type GetBalancesParams struct {
	// Currency Convert all balances to this currency
	Currency *string `form:"currency,omitempty" json:"currency,omitempty"`

	// GroupBy How to group the balance results
	GroupBy *GetBalancesParamsGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// GetBalancesParamsGroupBy defines parameters for GetBalances.
type GetBalancesParamsGroupBy string

// ListCategoriesParams defines parameters for ListCategories.
type ListCategoriesParams struct {
	// Type Filter categories by type
	Type *CategoryType `form:"type,omitempty" json:"type,omitempty"`
}

// GetExchangeRatesParams defines parameters for GetExchangeRates.
type GetExchangeRatesParams struct {
	// BaseCurrency Base currency for rates
	BaseCurrency string `form:"baseCurrency" json:"baseCurrency"`

	// TargetCurrencies Target currencies to get rates for
	TargetCurrencies *[]string `form:"targetCurrencies,omitempty" json:"targetCurrencies,omitempty"`
}

// ListExpendituresParams defines parameters for ListExpenditures.
type ListExpendituresParams struct {
	// CategoryId Filter by category ID
	CategoryId *string `form:"categoryId,omitempty" json:"categoryId,omitempty"`

	// Tag Filter by tag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// StartDate Filter by start date (inclusive)
	StartDate *openapi_types.Date `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate Filter by end date (inclusive)
	EndDate *openapi_types.Date `form:"endDate,omitempty" json:"endDate,omitempty"`

	// Declared Filter by declared status
	Declared *bool `form:"declared,omitempty" json:"declared,omitempty"`

	// Planned Filter by planned status
	Planned *bool `form:"planned,omitempty" json:"planned,omitempty"`

	// Currency Filter by currency
	Currency *string `form:"currency,omitempty" json:"currency,omitempty"`

	// Description Filter by description
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// AccountId Filter by account ID
	AccountId *string `form:"accountId,omitempty" json:"accountId,omitempty"`

	// Tags Filter by tag IDs
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// Limit Limit the number of results
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset the result set
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListHouseholdMembersParams defines parameters for ListHouseholdMembers.
type ListHouseholdMembersParams struct {
	// Active Filter by active status
	Active *bool `form:"active,omitempty" json:"active,omitempty"`

	// Role Filter by household role
	Role *string `form:"role,omitempty" json:"role,omitempty"`
}

// ListIngressesParams defines parameters for ListIngresses.
type ListIngressesParams struct {
	// Category Filter by category
	Category *string `form:"category,omitempty" json:"category,omitempty"`

	// Source Filter by source
	Source *string `form:"source,omitempty" json:"source,omitempty"`

	// Tags Filter by tags
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// StartDate Filter by start date (inclusive)
	StartDate *openapi_types.Date `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate Filter by end date (inclusive)
	EndDate *openapi_types.Date `form:"endDate,omitempty" json:"endDate,omitempty"`

	// IsRecurring Filter by recurring status
	IsRecurring *bool `form:"isRecurring,omitempty" json:"isRecurring,omitempty"`

	// Currency Filter by currency
	Currency *string `form:"currency,omitempty" json:"currency,omitempty"`

	// Limit Limit the number of results
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset the result set
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListSavingsGoalsParams defines parameters for ListSavingsGoals.
type ListSavingsGoalsParams struct {
	// Category Filter by goal category
	Category *string `form:"category,omitempty" json:"category,omitempty"`

	// Status Filter by goal status
	Status *ListSavingsGoalsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Currency Filter by currency
	Currency *string `form:"currency,omitempty" json:"currency,omitempty"`

	// AccountId Filter by associated account ID
	AccountId *string `form:"accountId,omitempty" json:"accountId,omitempty"`

	// TargetDateBefore Filter by target date before specified date
	TargetDateBefore *openapi_types.Date `form:"targetDateBefore,omitempty" json:"targetDateBefore,omitempty"`

	// TargetDateAfter Filter by target date after specified date
	TargetDateAfter *openapi_types.Date `form:"targetDateAfter,omitempty" json:"targetDateAfter,omitempty"`

	// Limit Limit the number of results
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset the result set
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListSavingsGoalsParamsStatus defines parameters for ListSavingsGoals.
type ListSavingsGoalsParamsStatus string

// ListSavingsContributionsParams defines parameters for ListSavingsContributions.
type ListSavingsContributionsParams struct {
	// StartDate Filter by start date (inclusive)
	StartDate *openapi_types.Date `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate Filter by end date (inclusive)
	EndDate *openapi_types.Date `form:"endDate,omitempty" json:"endDate,omitempty"`

	// SourceAccountId Filter by source account ID
	SourceAccountId *string `form:"sourceAccountId,omitempty" json:"sourceAccountId,omitempty"`
}

// ListSavingsTransactionsParams defines parameters for ListSavingsTransactions.
type ListSavingsTransactionsParams struct {
	// Type Filter by transaction type (contribution or withdrawal)
	Type *ListSavingsTransactionsParamsType `form:"type,omitempty" json:"type,omitempty"`

	// StartDate Filter transactions after this date (inclusive)
	StartDate *openapi_types.Date `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate Filter transactions before this date (inclusive)
	EndDate *openapi_types.Date `form:"endDate,omitempty" json:"endDate,omitempty"`

	// MinAmount Filter transactions with amount greater than or equal to this value
	MinAmount *float32 `form:"minAmount,omitempty" json:"minAmount,omitempty"`

	// MaxAmount Filter transactions with amount less than or equal to this value
	MaxAmount *float32 `form:"maxAmount,omitempty" json:"maxAmount,omitempty"`

	// Limit Limit the number of results
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset the result set
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListSavingsTransactionsParamsType defines parameters for ListSavingsTransactions.
type ListSavingsTransactionsParamsType string

// ListSavingsWithdrawalsParams defines parameters for ListSavingsWithdrawals.
type ListSavingsWithdrawalsParams struct {
	// StartDate Filter by start date (inclusive)
	StartDate *openapi_types.Date `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate Filter by end date (inclusive)
	EndDate *openapi_types.Date `form:"endDate,omitempty" json:"endDate,omitempty"`

	// DestinationAccountId Filter by destination account ID
	DestinationAccountId *string `form:"destinationAccountId,omitempty" json:"destinationAccountId,omitempty"`
}

// ListTransactionsParams defines parameters for ListTransactions.
type ListTransactionsParams struct {
	// StartDate Filter transactions after this date
	StartDate *openapi_types.Date `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate Filter transactions before this date
	EndDate *openapi_types.Date `form:"endDate,omitempty" json:"endDate,omitempty"`

	// AccountId Filter by account ID
	AccountId *string `form:"accountId,omitempty" json:"accountId,omitempty"`

	// TransactionType Filter by transaction type
	TransactionType *ListTransactionsParamsTransactionType `form:"transactionType,omitempty" json:"transactionType,omitempty"`

	// MinAmount Filter by minimum amount
	MinAmount *float32 `form:"minAmount,omitempty" json:"minAmount,omitempty"`

	// MaxAmount Filter by maximum amount
	MaxAmount *float32 `form:"maxAmount,omitempty" json:"maxAmount,omitempty"`

	// Currency Filter by currency
	Currency *string `form:"currency,omitempty" json:"currency,omitempty"`

	// Limit Limit the number of results
	Limit int `form:"limit" json:"limit"`

	// Offset Offset the result set
	Offset int `form:"offset" json:"offset"`
}

// ListTransactionsParamsTransactionType defines parameters for ListTransactions.
type ListTransactionsParamsTransactionType string

// ListTransfersParams defines parameters for ListTransfers.
type ListTransfersParams struct {
	// SourceAccountId Filter by source account ID
	SourceAccountId *string `form:"sourceAccountId,omitempty" json:"sourceAccountId,omitempty"`

	// DestinationAccountId Filter by destination account ID
	DestinationAccountId *string `form:"destinationAccountId,omitempty" json:"destinationAccountId,omitempty"`

	// StartDate Filter by start date (inclusive)
	StartDate *openapi_types.Date `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate Filter by end date (inclusive)
	EndDate *openapi_types.Date `form:"endDate,omitempty" json:"endDate,omitempty"`

	// Limit Limit the number of results
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset the result set
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody = AccountRequest

// UpdateAccountJSONRequestBody defines body for UpdateAccount for application/json ContentType.
type UpdateAccountJSONRequestBody = Account

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody RegisterUserJSONBody

// CreateCategoryJSONRequestBody defines body for CreateCategory for application/json ContentType.
type CreateCategoryJSONRequestBody = CategoryRequest

// UpdateCategoryJSONRequestBody defines body for UpdateCategory for application/json ContentType.
type UpdateCategoryJSONRequestBody = CategoryRequest

// CreateExpenditureJSONRequestBody defines body for CreateExpenditure for application/json ContentType.
type CreateExpenditureJSONRequestBody = ExpenditureRequest

// RollbackExpenditureJSONRequestBody defines body for RollbackExpenditure for application/json ContentType.
type RollbackExpenditureJSONRequestBody = RollbackRequest

// CreateHouseholdMemberJSONRequestBody defines body for CreateHouseholdMember for application/json ContentType.
type CreateHouseholdMemberJSONRequestBody = HouseholdMemberRequest

// UpdateHouseholdMemberJSONRequestBody defines body for UpdateHouseholdMember for application/json ContentType.
type UpdateHouseholdMemberJSONRequestBody = HouseholdMemberRequest

// CreateIngressJSONRequestBody defines body for CreateIngress for application/json ContentType.
type CreateIngressJSONRequestBody = IngressRequest

// UpdateIngressRecurrencePatternJSONRequestBody defines body for UpdateIngressRecurrencePattern for application/json ContentType.
type UpdateIngressRecurrencePatternJSONRequestBody = RecurrencePatternRequest

// RollbackIngressJSONRequestBody defines body for RollbackIngress for application/json ContentType.
type RollbackIngressJSONRequestBody = RollbackRequest

// CreateIngressRecurrencePatternJSONRequestBody defines body for CreateIngressRecurrencePattern for application/json ContentType.
type CreateIngressRecurrencePatternJSONRequestBody = RecurrencePatternRequest

// CreateSavingsGoalJSONRequestBody defines body for CreateSavingsGoal for application/json ContentType.
type CreateSavingsGoalJSONRequestBody = SavingsGoalRequest

// UpdateSavingsGoalJSONRequestBody defines body for UpdateSavingsGoal for application/json ContentType.
type UpdateSavingsGoalJSONRequestBody = SavingsGoalRequest

// AddSavingsContributionJSONRequestBody defines body for AddSavingsContribution for application/json ContentType.
type AddSavingsContributionJSONRequestBody = SavingsContributionRequest

// AddSavingsWithdrawalJSONRequestBody defines body for AddSavingsWithdrawal for application/json ContentType.
type AddSavingsWithdrawalJSONRequestBody = SavingsWithdrawalRequest

// CreateTagJSONRequestBody defines body for CreateTag for application/json ContentType.
type CreateTagJSONRequestBody = TagRequest

// CreateTransferJSONRequestBody defines body for CreateTransfer for application/json ContentType.
type CreateTransferJSONRequestBody = TransferRequest

// RollbackTransferJSONRequestBody defines body for RollbackTransfer for application/json ContentType.
type RollbackTransferJSONRequestBody = RollbackRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all accounts
	// (GET /accounts)
	ListAccounts(w http.ResponseWriter, r *http.Request, params ListAccountsParams)
	// Create a new money account
	// (POST /accounts)
	CreateAccount(w http.ResponseWriter, r *http.Request)
	// Delete account
	// (DELETE /accounts/{id})
	DeleteAccount(w http.ResponseWriter, r *http.Request, id string)
	// Get account by ID
	// (GET /accounts/{id})
	GetAccount(w http.ResponseWriter, r *http.Request, id string)
	// Update account
	// (PUT /accounts/{id})
	UpdateAccount(w http.ResponseWriter, r *http.Request, id string)
	// Activate an account
	// (PATCH /accounts/{id}/activate)
	ActivateAccount(w http.ResponseWriter, r *http.Request, id string)
	// Checks if account can be deleted
	// (GET /accounts/{id}/can-delete)
	CanDeleteAccount(w http.ResponseWriter, r *http.Request, id string)
	// Deactivate an account
	// (PATCH /accounts/{id}/deactivate)
	DeactivateAccount(w http.ResponseWriter, r *http.Request, id string)
	// Login to the system
	// (POST /auth/login)
	Login(w http.ResponseWriter, r *http.Request)
	// Refresh authentication token
	// (POST /auth/refresh)
	RefreshToken(w http.ResponseWriter, r *http.Request)
	// Register a new user
	// (POST /auth/register)
	RegisterUser(w http.ResponseWriter, r *http.Request)
	// Get current balances
	// (GET /balances)
	GetBalances(w http.ResponseWriter, r *http.Request, params GetBalancesParams)
	// List categories
	// (GET /categories)
	ListCategories(w http.ResponseWriter, r *http.Request, params ListCategoriesParams)
	// Create category
	// (POST /categories)
	CreateCategory(w http.ResponseWriter, r *http.Request)
	// Delete category
	// (DELETE /categories/{id})
	DeleteCategory(w http.ResponseWriter, r *http.Request, id string)
	// Update category
	// (PUT /categories/{id})
	UpdateCategory(w http.ResponseWriter, r *http.Request, id string)
	// Activate a category
	// (PATCH /categories/{id}/activate)
	ActivateCategory(w http.ResponseWriter, r *http.Request, id string)
	// Deactivate a category
	// (PATCH /categories/{id}/deactivate)
	DeactivateCategory(w http.ResponseWriter, r *http.Request, id string)
	// Get current exchange rates
	// (GET /exchange-rates)
	GetExchangeRates(w http.ResponseWriter, r *http.Request, params GetExchangeRatesParams)
	// List all expenditures
	// (GET /expenditures)
	ListExpenditures(w http.ResponseWriter, r *http.Request, params ListExpendituresParams)
	// Create a new expenditure
	// (POST /expenditures)
	CreateExpenditure(w http.ResponseWriter, r *http.Request)
	// Get expenditure by ID
	// (GET /expenditures/{id})
	GetExpenditure(w http.ResponseWriter, r *http.Request, id string)
	// Rollback an expenditure
	// (POST /expenditures/{id}/rollback)
	RollbackExpenditure(w http.ResponseWriter, r *http.Request, id string)
	// List all household members
	// (GET /household-members)
	ListHouseholdMembers(w http.ResponseWriter, r *http.Request, params ListHouseholdMembersParams)
	// Create a new household member
	// (POST /household-members)
	CreateHouseholdMember(w http.ResponseWriter, r *http.Request)
	// Delete household member
	// (DELETE /household-members/{id})
	DeleteHouseholdMember(w http.ResponseWriter, r *http.Request, id string)
	// Get household member by ID
	// (GET /household-members/{id})
	GetHouseholdMember(w http.ResponseWriter, r *http.Request, id string)
	// Update household member
	// (PUT /household-members/{id})
	UpdateHouseholdMember(w http.ResponseWriter, r *http.Request, id string)
	// Activate household member by ID
	// (PATCH /household-members/{id}/activate)
	ActivateHouseholdMember(w http.ResponseWriter, r *http.Request, id string)
	// Deactivate household member by ID
	// (PATCH /household-members/{id}/deactivate)
	DeactivateHouseholdMember(w http.ResponseWriter, r *http.Request, id string)
	// List all ingresses
	// (GET /ingresses)
	ListIngresses(w http.ResponseWriter, r *http.Request, params ListIngressesParams)
	// Create a new ingress
	// (POST /ingresses)
	CreateIngress(w http.ResponseWriter, r *http.Request)
	// Get ingress by ID
	// (GET /ingresses/{id})
	GetIngress(w http.ResponseWriter, r *http.Request, id string)
	// Delete a recurrence pattern
	// (DELETE /ingresses/{id}/recurrence-pattern/{pattern_id})
	DeleteIngressRecurrencePattern(w http.ResponseWriter, r *http.Request, id string, patternId string)
	// Get a specific recurrence pattern
	// (GET /ingresses/{id}/recurrence-pattern/{pattern_id})
	GetIngressRecurrencePattern(w http.ResponseWriter, r *http.Request, id string, patternId string)
	// Update a recurrence pattern
	// (PUT /ingresses/{id}/recurrence-pattern/{pattern_id})
	UpdateIngressRecurrencePattern(w http.ResponseWriter, r *http.Request, id string, patternId string)
	// Rollback an Ingress
	// (POST /ingresses/{id}/rollback)
	RollbackIngress(w http.ResponseWriter, r *http.Request, id string)
	// Create a recurrence pattern for Ingresses
	// (POST /recurrence-pattern)
	CreateIngressRecurrencePattern(w http.ResponseWriter, r *http.Request)
	// List all savings goals
	// (GET /savings)
	ListSavingsGoals(w http.ResponseWriter, r *http.Request, params ListSavingsGoalsParams)
	// Create a new savings goal
	// (POST /savings)
	CreateSavingsGoal(w http.ResponseWriter, r *http.Request)
	// Delete savings goal
	// (DELETE /savings/{id})
	DeleteSavingsGoal(w http.ResponseWriter, r *http.Request, id string)
	// Get savings goal by ID
	// (GET /savings/{id})
	GetSavingsGoal(w http.ResponseWriter, r *http.Request, id string)
	// Update savings goal
	// (PUT /savings/{id})
	UpdateSavingsGoal(w http.ResponseWriter, r *http.Request, id string)
	// List contributions for a savings goal
	// (GET /savings/{id}/contributions)
	ListSavingsContributions(w http.ResponseWriter, r *http.Request, id string, params ListSavingsContributionsParams)
	// Add contribution to savings goal
	// (POST /savings/{id}/contributions)
	AddSavingsContribution(w http.ResponseWriter, r *http.Request, id string)
	// Get savings goal progress
	// (GET /savings/{id}/progress)
	GetSavingsProgress(w http.ResponseWriter, r *http.Request, id string)
	// List transactions for a savings goal
	// (GET /savings/{id}/transactions)
	ListSavingsTransactions(w http.ResponseWriter, r *http.Request, id string, params ListSavingsTransactionsParams)
	// List withdrawals from a savings goal
	// (GET /savings/{id}/withdrawals)
	ListSavingsWithdrawals(w http.ResponseWriter, r *http.Request, id string, params ListSavingsWithdrawalsParams)
	// Add withdrawal from savings goal
	// (POST /savings/{id}/withdrawals)
	AddSavingsWithdrawal(w http.ResponseWriter, r *http.Request, id string)
	// List tags
	// (GET /tags)
	ListTags(w http.ResponseWriter, r *http.Request)
	// Create tag
	// (POST /tags)
	CreateTag(w http.ResponseWriter, r *http.Request)
	// List tags by type
	// (GET /tags/type/{type})
	ListTagsByType(w http.ResponseWriter, r *http.Request, pType TagType)
	// Delete tag
	// (DELETE /tags/{id})
	DeleteTag(w http.ResponseWriter, r *http.Request, id string)
	// List all transactions
	// (GET /transactions)
	ListTransactions(w http.ResponseWriter, r *http.Request, params ListTransactionsParams)
	// List all transfers
	// (GET /transfers)
	ListTransfers(w http.ResponseWriter, r *http.Request, params ListTransfersParams)
	// Create a new money transfer
	// (POST /transfers)
	CreateTransfer(w http.ResponseWriter, r *http.Request)
	// Get transfer by ID
	// (GET /transfers/{id})
	GetTransfer(w http.ResponseWriter, r *http.Request, id string)
	// Rollback a Transfer
	// (POST /transfers/{id}/rollback)
	RollbackTransfer(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListAccounts operation middleware
func (siw *ServerInterfaceWrapper) ListAccounts(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAccountsParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "currency" -------------

	err = runtime.BindQueryParameter("form", true, false, "currency", r.URL.Query(), &params.Currency)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "currency", Err: err})
		return
	}

	// ------------- Optional query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, false, "active", r.URL.Query(), &params.Active)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "active", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAccounts(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAccount operation middleware
func (siw *ServerInterfaceWrapper) CreateAccount(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAccount(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAccount operation middleware
func (siw *ServerInterfaceWrapper) DeleteAccount(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAccount(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAccount operation middleware
func (siw *ServerInterfaceWrapper) GetAccount(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAccount(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateAccount operation middleware
func (siw *ServerInterfaceWrapper) UpdateAccount(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAccount(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ActivateAccount operation middleware
func (siw *ServerInterfaceWrapper) ActivateAccount(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ActivateAccount(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CanDeleteAccount operation middleware
func (siw *ServerInterfaceWrapper) CanDeleteAccount(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CanDeleteAccount(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeactivateAccount operation middleware
func (siw *ServerInterfaceWrapper) DeactivateAccount(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeactivateAccount(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefreshToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetBalances operation middleware
func (siw *ServerInterfaceWrapper) GetBalances(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBalancesParams

	// ------------- Optional query parameter "currency" -------------

	err = runtime.BindQueryParameter("form", true, false, "currency", r.URL.Query(), &params.Currency)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "currency", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBalances(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListCategories operation middleware
func (siw *ServerInterfaceWrapper) ListCategories(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCategoriesParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCategories(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateCategory operation middleware
func (siw *ServerInterfaceWrapper) CreateCategory(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCategory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteCategory operation middleware
func (siw *ServerInterfaceWrapper) DeleteCategory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCategory(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateCategory operation middleware
func (siw *ServerInterfaceWrapper) UpdateCategory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCategory(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ActivateCategory operation middleware
func (siw *ServerInterfaceWrapper) ActivateCategory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ActivateCategory(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeactivateCategory operation middleware
func (siw *ServerInterfaceWrapper) DeactivateCategory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeactivateCategory(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetExchangeRates operation middleware
func (siw *ServerInterfaceWrapper) GetExchangeRates(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetExchangeRatesParams

	// ------------- Required query parameter "baseCurrency" -------------

	if paramValue := r.URL.Query().Get("baseCurrency"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "baseCurrency"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "baseCurrency", r.URL.Query(), &params.BaseCurrency)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "baseCurrency", Err: err})
		return
	}

	// ------------- Optional query parameter "targetCurrencies" -------------

	err = runtime.BindQueryParameter("form", true, false, "targetCurrencies", r.URL.Query(), &params.TargetCurrencies)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "targetCurrencies", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetExchangeRates(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListExpenditures operation middleware
func (siw *ServerInterfaceWrapper) ListExpenditures(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListExpendituresParams

	// ------------- Optional query parameter "categoryId" -------------

	err = runtime.BindQueryParameter("form", true, false, "categoryId", r.URL.Query(), &params.CategoryId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "categoryId", Err: err})
		return
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", r.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", r.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "startDate", Err: err})
		return
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", r.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endDate", Err: err})
		return
	}

	// ------------- Optional query parameter "declared" -------------

	err = runtime.BindQueryParameter("form", true, false, "declared", r.URL.Query(), &params.Declared)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "declared", Err: err})
		return
	}

	// ------------- Optional query parameter "planned" -------------

	err = runtime.BindQueryParameter("form", true, false, "planned", r.URL.Query(), &params.Planned)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "planned", Err: err})
		return
	}

	// ------------- Optional query parameter "currency" -------------

	err = runtime.BindQueryParameter("form", true, false, "currency", r.URL.Query(), &params.Currency)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "currency", Err: err})
		return
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", r.URL.Query(), &params.Description)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "description", Err: err})
		return
	}

	// ------------- Optional query parameter "accountId" -------------

	err = runtime.BindQueryParameter("form", true, false, "accountId", r.URL.Query(), &params.AccountId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "accountId", Err: err})
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListExpenditures(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateExpenditure operation middleware
func (siw *ServerInterfaceWrapper) CreateExpenditure(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateExpenditure(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetExpenditure operation middleware
func (siw *ServerInterfaceWrapper) GetExpenditure(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetExpenditure(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RollbackExpenditure operation middleware
func (siw *ServerInterfaceWrapper) RollbackExpenditure(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RollbackExpenditure(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListHouseholdMembers operation middleware
func (siw *ServerInterfaceWrapper) ListHouseholdMembers(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListHouseholdMembersParams

	// ------------- Optional query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, false, "active", r.URL.Query(), &params.Active)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "active", Err: err})
		return
	}

	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", r.URL.Query(), &params.Role)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListHouseholdMembers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateHouseholdMember operation middleware
func (siw *ServerInterfaceWrapper) CreateHouseholdMember(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateHouseholdMember(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteHouseholdMember operation middleware
func (siw *ServerInterfaceWrapper) DeleteHouseholdMember(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteHouseholdMember(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHouseholdMember operation middleware
func (siw *ServerInterfaceWrapper) GetHouseholdMember(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHouseholdMember(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateHouseholdMember operation middleware
func (siw *ServerInterfaceWrapper) UpdateHouseholdMember(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateHouseholdMember(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ActivateHouseholdMember operation middleware
func (siw *ServerInterfaceWrapper) ActivateHouseholdMember(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ActivateHouseholdMember(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeactivateHouseholdMember operation middleware
func (siw *ServerInterfaceWrapper) DeactivateHouseholdMember(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeactivateHouseholdMember(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListIngresses operation middleware
func (siw *ServerInterfaceWrapper) ListIngresses(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIngressesParams

	// ------------- Optional query parameter "category" -------------

	err = runtime.BindQueryParameter("form", true, false, "category", r.URL.Query(), &params.Category)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "category", Err: err})
		return
	}

	// ------------- Optional query parameter "source" -------------

	err = runtime.BindQueryParameter("form", true, false, "source", r.URL.Query(), &params.Source)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "source", Err: err})
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", r.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "startDate", Err: err})
		return
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", r.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endDate", Err: err})
		return
	}

	// ------------- Optional query parameter "isRecurring" -------------

	err = runtime.BindQueryParameter("form", true, false, "isRecurring", r.URL.Query(), &params.IsRecurring)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "isRecurring", Err: err})
		return
	}

	// ------------- Optional query parameter "currency" -------------

	err = runtime.BindQueryParameter("form", true, false, "currency", r.URL.Query(), &params.Currency)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "currency", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListIngresses(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateIngress operation middleware
func (siw *ServerInterfaceWrapper) CreateIngress(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateIngress(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetIngress operation middleware
func (siw *ServerInterfaceWrapper) GetIngress(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIngress(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteIngressRecurrencePattern operation middleware
func (siw *ServerInterfaceWrapper) DeleteIngressRecurrencePattern(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "pattern_id" -------------
	var patternId string

	err = runtime.BindStyledParameterWithOptions("simple", "pattern_id", r.PathValue("pattern_id"), &patternId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pattern_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteIngressRecurrencePattern(w, r, id, patternId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetIngressRecurrencePattern operation middleware
func (siw *ServerInterfaceWrapper) GetIngressRecurrencePattern(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "pattern_id" -------------
	var patternId string

	err = runtime.BindStyledParameterWithOptions("simple", "pattern_id", r.PathValue("pattern_id"), &patternId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pattern_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIngressRecurrencePattern(w, r, id, patternId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateIngressRecurrencePattern operation middleware
func (siw *ServerInterfaceWrapper) UpdateIngressRecurrencePattern(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "pattern_id" -------------
	var patternId string

	err = runtime.BindStyledParameterWithOptions("simple", "pattern_id", r.PathValue("pattern_id"), &patternId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pattern_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateIngressRecurrencePattern(w, r, id, patternId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RollbackIngress operation middleware
func (siw *ServerInterfaceWrapper) RollbackIngress(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RollbackIngress(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateIngressRecurrencePattern operation middleware
func (siw *ServerInterfaceWrapper) CreateIngressRecurrencePattern(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateIngressRecurrencePattern(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListSavingsGoals operation middleware
func (siw *ServerInterfaceWrapper) ListSavingsGoals(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSavingsGoalsParams

	// ------------- Optional query parameter "category" -------------

	err = runtime.BindQueryParameter("form", true, false, "category", r.URL.Query(), &params.Category)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "category", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "currency" -------------

	err = runtime.BindQueryParameter("form", true, false, "currency", r.URL.Query(), &params.Currency)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "currency", Err: err})
		return
	}

	// ------------- Optional query parameter "accountId" -------------

	err = runtime.BindQueryParameter("form", true, false, "accountId", r.URL.Query(), &params.AccountId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "accountId", Err: err})
		return
	}

	// ------------- Optional query parameter "targetDateBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "targetDateBefore", r.URL.Query(), &params.TargetDateBefore)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "targetDateBefore", Err: err})
		return
	}

	// ------------- Optional query parameter "targetDateAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "targetDateAfter", r.URL.Query(), &params.TargetDateAfter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "targetDateAfter", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSavingsGoals(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSavingsGoal operation middleware
func (siw *ServerInterfaceWrapper) CreateSavingsGoal(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSavingsGoal(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSavingsGoal operation middleware
func (siw *ServerInterfaceWrapper) DeleteSavingsGoal(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSavingsGoal(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSavingsGoal operation middleware
func (siw *ServerInterfaceWrapper) GetSavingsGoal(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSavingsGoal(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateSavingsGoal operation middleware
func (siw *ServerInterfaceWrapper) UpdateSavingsGoal(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSavingsGoal(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListSavingsContributions operation middleware
func (siw *ServerInterfaceWrapper) ListSavingsContributions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSavingsContributionsParams

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", r.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "startDate", Err: err})
		return
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", r.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endDate", Err: err})
		return
	}

	// ------------- Optional query parameter "sourceAccountId" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourceAccountId", r.URL.Query(), &params.SourceAccountId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sourceAccountId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSavingsContributions(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddSavingsContribution operation middleware
func (siw *ServerInterfaceWrapper) AddSavingsContribution(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddSavingsContribution(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSavingsProgress operation middleware
func (siw *ServerInterfaceWrapper) GetSavingsProgress(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSavingsProgress(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListSavingsTransactions operation middleware
func (siw *ServerInterfaceWrapper) ListSavingsTransactions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSavingsTransactionsParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", r.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "startDate", Err: err})
		return
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", r.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endDate", Err: err})
		return
	}

	// ------------- Optional query parameter "minAmount" -------------

	err = runtime.BindQueryParameter("form", true, false, "minAmount", r.URL.Query(), &params.MinAmount)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "minAmount", Err: err})
		return
	}

	// ------------- Optional query parameter "maxAmount" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxAmount", r.URL.Query(), &params.MaxAmount)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "maxAmount", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSavingsTransactions(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListSavingsWithdrawals operation middleware
func (siw *ServerInterfaceWrapper) ListSavingsWithdrawals(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSavingsWithdrawalsParams

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", r.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "startDate", Err: err})
		return
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", r.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endDate", Err: err})
		return
	}

	// ------------- Optional query parameter "destinationAccountId" -------------

	err = runtime.BindQueryParameter("form", true, false, "destinationAccountId", r.URL.Query(), &params.DestinationAccountId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "destinationAccountId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSavingsWithdrawals(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddSavingsWithdrawal operation middleware
func (siw *ServerInterfaceWrapper) AddSavingsWithdrawal(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddSavingsWithdrawal(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTags operation middleware
func (siw *ServerInterfaceWrapper) ListTags(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTags(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTag operation middleware
func (siw *ServerInterfaceWrapper) CreateTag(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTag(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTagsByType operation middleware
func (siw *ServerInterfaceWrapper) ListTagsByType(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "type" -------------
	var pType TagType

	err = runtime.BindStyledParameterWithOptions("simple", "type", r.PathValue("type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTagsByType(w, r, pType)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTag operation middleware
func (siw *ServerInterfaceWrapper) DeleteTag(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTag(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTransactions operation middleware
func (siw *ServerInterfaceWrapper) ListTransactions(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTransactionsParams

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", r.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "startDate", Err: err})
		return
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", r.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endDate", Err: err})
		return
	}

	// ------------- Optional query parameter "accountId" -------------

	err = runtime.BindQueryParameter("form", true, false, "accountId", r.URL.Query(), &params.AccountId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "accountId", Err: err})
		return
	}

	// ------------- Optional query parameter "transactionType" -------------

	err = runtime.BindQueryParameter("form", true, false, "transactionType", r.URL.Query(), &params.TransactionType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "transactionType", Err: err})
		return
	}

	// ------------- Optional query parameter "minAmount" -------------

	err = runtime.BindQueryParameter("form", true, false, "minAmount", r.URL.Query(), &params.MinAmount)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "minAmount", Err: err})
		return
	}

	// ------------- Optional query parameter "maxAmount" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxAmount", r.URL.Query(), &params.MaxAmount)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "maxAmount", Err: err})
		return
	}

	// ------------- Optional query parameter "currency" -------------

	err = runtime.BindQueryParameter("form", true, false, "currency", r.URL.Query(), &params.Currency)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "currency", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------

	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTransactions(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTransfers operation middleware
func (siw *ServerInterfaceWrapper) ListTransfers(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTransfersParams

	// ------------- Optional query parameter "sourceAccountId" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourceAccountId", r.URL.Query(), &params.SourceAccountId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sourceAccountId", Err: err})
		return
	}

	// ------------- Optional query parameter "destinationAccountId" -------------

	err = runtime.BindQueryParameter("form", true, false, "destinationAccountId", r.URL.Query(), &params.DestinationAccountId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "destinationAccountId", Err: err})
		return
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", r.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "startDate", Err: err})
		return
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", r.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endDate", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTransfers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTransfer operation middleware
func (siw *ServerInterfaceWrapper) CreateTransfer(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTransfer(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTransfer operation middleware
func (siw *ServerInterfaceWrapper) GetTransfer(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTransfer(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RollbackTransfer operation middleware
func (siw *ServerInterfaceWrapper) RollbackTransfer(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RollbackTransfer(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/accounts", wrapper.ListAccounts)
	m.HandleFunc("POST "+options.BaseURL+"/accounts", wrapper.CreateAccount)
	m.HandleFunc("DELETE "+options.BaseURL+"/accounts/{id}", wrapper.DeleteAccount)
	m.HandleFunc("GET "+options.BaseURL+"/accounts/{id}", wrapper.GetAccount)
	m.HandleFunc("PUT "+options.BaseURL+"/accounts/{id}", wrapper.UpdateAccount)
	m.HandleFunc("PATCH "+options.BaseURL+"/accounts/{id}/activate", wrapper.ActivateAccount)
	m.HandleFunc("GET "+options.BaseURL+"/accounts/{id}/can-delete", wrapper.CanDeleteAccount)
	m.HandleFunc("PATCH "+options.BaseURL+"/accounts/{id}/deactivate", wrapper.DeactivateAccount)
	m.HandleFunc("POST "+options.BaseURL+"/auth/login", wrapper.Login)
	m.HandleFunc("POST "+options.BaseURL+"/auth/refresh", wrapper.RefreshToken)
	m.HandleFunc("POST "+options.BaseURL+"/auth/register", wrapper.RegisterUser)
	m.HandleFunc("GET "+options.BaseURL+"/balances", wrapper.GetBalances)
	m.HandleFunc("GET "+options.BaseURL+"/categories", wrapper.ListCategories)
	m.HandleFunc("POST "+options.BaseURL+"/categories", wrapper.CreateCategory)
	m.HandleFunc("DELETE "+options.BaseURL+"/categories/{id}", wrapper.DeleteCategory)
	m.HandleFunc("PUT "+options.BaseURL+"/categories/{id}", wrapper.UpdateCategory)
	m.HandleFunc("PATCH "+options.BaseURL+"/categories/{id}/activate", wrapper.ActivateCategory)
	m.HandleFunc("PATCH "+options.BaseURL+"/categories/{id}/deactivate", wrapper.DeactivateCategory)
	m.HandleFunc("GET "+options.BaseURL+"/exchange-rates", wrapper.GetExchangeRates)
	m.HandleFunc("GET "+options.BaseURL+"/expenditures", wrapper.ListExpenditures)
	m.HandleFunc("POST "+options.BaseURL+"/expenditures", wrapper.CreateExpenditure)
	m.HandleFunc("GET "+options.BaseURL+"/expenditures/{id}", wrapper.GetExpenditure)
	m.HandleFunc("POST "+options.BaseURL+"/expenditures/{id}/rollback", wrapper.RollbackExpenditure)
	m.HandleFunc("GET "+options.BaseURL+"/household-members", wrapper.ListHouseholdMembers)
	m.HandleFunc("POST "+options.BaseURL+"/household-members", wrapper.CreateHouseholdMember)
	m.HandleFunc("DELETE "+options.BaseURL+"/household-members/{id}", wrapper.DeleteHouseholdMember)
	m.HandleFunc("GET "+options.BaseURL+"/household-members/{id}", wrapper.GetHouseholdMember)
	m.HandleFunc("PUT "+options.BaseURL+"/household-members/{id}", wrapper.UpdateHouseholdMember)
	m.HandleFunc("PATCH "+options.BaseURL+"/household-members/{id}/activate", wrapper.ActivateHouseholdMember)
	m.HandleFunc("PATCH "+options.BaseURL+"/household-members/{id}/deactivate", wrapper.DeactivateHouseholdMember)
	m.HandleFunc("GET "+options.BaseURL+"/ingresses", wrapper.ListIngresses)
	m.HandleFunc("POST "+options.BaseURL+"/ingresses", wrapper.CreateIngress)
	m.HandleFunc("GET "+options.BaseURL+"/ingresses/{id}", wrapper.GetIngress)
	m.HandleFunc("DELETE "+options.BaseURL+"/ingresses/{id}/recurrence-pattern/{pattern_id}", wrapper.DeleteIngressRecurrencePattern)
	m.HandleFunc("GET "+options.BaseURL+"/ingresses/{id}/recurrence-pattern/{pattern_id}", wrapper.GetIngressRecurrencePattern)
	m.HandleFunc("PUT "+options.BaseURL+"/ingresses/{id}/recurrence-pattern/{pattern_id}", wrapper.UpdateIngressRecurrencePattern)
	m.HandleFunc("POST "+options.BaseURL+"/ingresses/{id}/rollback", wrapper.RollbackIngress)
	m.HandleFunc("POST "+options.BaseURL+"/recurrence-pattern", wrapper.CreateIngressRecurrencePattern)
	m.HandleFunc("GET "+options.BaseURL+"/savings", wrapper.ListSavingsGoals)
	m.HandleFunc("POST "+options.BaseURL+"/savings", wrapper.CreateSavingsGoal)
	m.HandleFunc("DELETE "+options.BaseURL+"/savings/{id}", wrapper.DeleteSavingsGoal)
	m.HandleFunc("GET "+options.BaseURL+"/savings/{id}", wrapper.GetSavingsGoal)
	m.HandleFunc("PUT "+options.BaseURL+"/savings/{id}", wrapper.UpdateSavingsGoal)
	m.HandleFunc("GET "+options.BaseURL+"/savings/{id}/contributions", wrapper.ListSavingsContributions)
	m.HandleFunc("POST "+options.BaseURL+"/savings/{id}/contributions", wrapper.AddSavingsContribution)
	m.HandleFunc("GET "+options.BaseURL+"/savings/{id}/progress", wrapper.GetSavingsProgress)
	m.HandleFunc("GET "+options.BaseURL+"/savings/{id}/transactions", wrapper.ListSavingsTransactions)
	m.HandleFunc("GET "+options.BaseURL+"/savings/{id}/withdrawals", wrapper.ListSavingsWithdrawals)
	m.HandleFunc("POST "+options.BaseURL+"/savings/{id}/withdrawals", wrapper.AddSavingsWithdrawal)
	m.HandleFunc("GET "+options.BaseURL+"/tags", wrapper.ListTags)
	m.HandleFunc("POST "+options.BaseURL+"/tags", wrapper.CreateTag)
	m.HandleFunc("GET "+options.BaseURL+"/tags/type/{type}", wrapper.ListTagsByType)
	m.HandleFunc("DELETE "+options.BaseURL+"/tags/{id}", wrapper.DeleteTag)
	m.HandleFunc("GET "+options.BaseURL+"/transactions", wrapper.ListTransactions)
	m.HandleFunc("GET "+options.BaseURL+"/transfers", wrapper.ListTransfers)
	m.HandleFunc("POST "+options.BaseURL+"/transfers", wrapper.CreateTransfer)
	m.HandleFunc("GET "+options.BaseURL+"/transfers/{id}", wrapper.GetTransfer)
	m.HandleFunc("POST "+options.BaseURL+"/transfers/{id}/rollback", wrapper.RollbackTransfer)

	return m
}

type N200Response struct {
}

type N204Response struct {
}

type N400JSONResponse Error

type N401Response struct {
}

type N404JSONResponse Error

type N409JSONResponse Error

type N500JSONResponse Error

type N501Response struct {
}

type ListAccountsRequestObject struct {
	Params ListAccountsParams
}

type ListAccountsResponseObject interface {
	VisitListAccountsResponse(w http.ResponseWriter) error
}

type ListAccounts200JSONResponse AccountList

func (response ListAccounts200JSONResponse) VisitListAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAccounts401Response = N401Response

func (response ListAccounts401Response) VisitListAccountsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListAccounts500JSONResponse struct{ N500JSONResponse }

func (response ListAccounts500JSONResponse) VisitListAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateAccountRequestObject struct {
	Body *CreateAccountJSONRequestBody
}

type CreateAccountResponseObject interface {
	VisitCreateAccountResponse(w http.ResponseWriter) error
}

type CreateAccount201JSONResponse Account

func (response CreateAccount201JSONResponse) VisitCreateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAccount400JSONResponse struct{ N400JSONResponse }

func (response CreateAccount400JSONResponse) VisitCreateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateAccount401Response = N401Response

func (response CreateAccount401Response) VisitCreateAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateAccount500JSONResponse struct{ N500JSONResponse }

func (response CreateAccount500JSONResponse) VisitCreateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccountRequestObject struct {
	Id string `json:"id"`
}

type DeleteAccountResponseObject interface {
	VisitDeleteAccountResponse(w http.ResponseWriter) error
}

type DeleteAccount204Response = N204Response

func (response DeleteAccount204Response) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAccount401Response = N401Response

func (response DeleteAccount401Response) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteAccount404JSONResponse struct{ N404JSONResponse }

func (response DeleteAccount404JSONResponse) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccount409JSONResponse struct{ N409JSONResponse }

func (response DeleteAccount409JSONResponse) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccount500JSONResponse struct{ N500JSONResponse }

func (response DeleteAccount500JSONResponse) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountRequestObject struct {
	Id string `json:"id"`
}

type GetAccountResponseObject interface {
	VisitGetAccountResponse(w http.ResponseWriter) error
}

type GetAccount200JSONResponse Account

func (response GetAccount200JSONResponse) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccount401Response = N401Response

func (response GetAccount401Response) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetAccount404JSONResponse struct{ N404JSONResponse }

func (response GetAccount404JSONResponse) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAccount500JSONResponse struct{ N500JSONResponse }

func (response GetAccount500JSONResponse) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAccountRequestObject struct {
	Id   string `json:"id"`
	Body *UpdateAccountJSONRequestBody
}

type UpdateAccountResponseObject interface {
	VisitUpdateAccountResponse(w http.ResponseWriter) error
}

type UpdateAccount200JSONResponse Account

func (response UpdateAccount200JSONResponse) VisitUpdateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAccount400JSONResponse struct{ N400JSONResponse }

func (response UpdateAccount400JSONResponse) VisitUpdateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAccount401Response = N401Response

func (response UpdateAccount401Response) VisitUpdateAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateAccount404JSONResponse struct{ N404JSONResponse }

func (response UpdateAccount404JSONResponse) VisitUpdateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAccount500JSONResponse struct{ N500JSONResponse }

func (response UpdateAccount500JSONResponse) VisitUpdateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ActivateAccountRequestObject struct {
	Id string `json:"id"`
}

type ActivateAccountResponseObject interface {
	VisitActivateAccountResponse(w http.ResponseWriter) error
}

type ActivateAccount200Response = N200Response

func (response ActivateAccount200Response) VisitActivateAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ActivateAccount400JSONResponse struct{ N400JSONResponse }

func (response ActivateAccount400JSONResponse) VisitActivateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ActivateAccount401Response = N401Response

func (response ActivateAccount401Response) VisitActivateAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ActivateAccount404JSONResponse struct{ N404JSONResponse }

func (response ActivateAccount404JSONResponse) VisitActivateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ActivateAccount500JSONResponse struct{ N500JSONResponse }

func (response ActivateAccount500JSONResponse) VisitActivateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CanDeleteAccountRequestObject struct {
	Id string `json:"id"`
}

type CanDeleteAccountResponseObject interface {
	VisitCanDeleteAccountResponse(w http.ResponseWriter) error
}

type CanDeleteAccount200JSONResponse CanDelete

func (response CanDeleteAccount200JSONResponse) VisitCanDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CanDeleteAccount400JSONResponse struct{ N400JSONResponse }

func (response CanDeleteAccount400JSONResponse) VisitCanDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CanDeleteAccount401Response = N401Response

func (response CanDeleteAccount401Response) VisitCanDeleteAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CanDeleteAccount404JSONResponse struct{ N404JSONResponse }

func (response CanDeleteAccount404JSONResponse) VisitCanDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CanDeleteAccount500JSONResponse struct{ N500JSONResponse }

func (response CanDeleteAccount500JSONResponse) VisitCanDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeactivateAccountRequestObject struct {
	Id string `json:"id"`
}

type DeactivateAccountResponseObject interface {
	VisitDeactivateAccountResponse(w http.ResponseWriter) error
}

type DeactivateAccount204Response = N204Response

func (response DeactivateAccount204Response) VisitDeactivateAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeactivateAccount400JSONResponse struct{ N400JSONResponse }

func (response DeactivateAccount400JSONResponse) VisitDeactivateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeactivateAccount401Response = N401Response

func (response DeactivateAccount401Response) VisitDeactivateAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeactivateAccount404JSONResponse struct{ N404JSONResponse }

func (response DeactivateAccount404JSONResponse) VisitDeactivateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeactivateAccount500JSONResponse struct{ N500JSONResponse }

func (response DeactivateAccount500JSONResponse) VisitDeactivateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse LoginResponse

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Login401JSONResponse LoginResponse

func (response Login401JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RefreshTokenRequestObject struct {
}

type RefreshTokenResponseObject interface {
	VisitRefreshTokenResponse(w http.ResponseWriter) error
}

type RefreshToken200JSONResponse LoginResponse

func (response RefreshToken200JSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RefreshToken401JSONResponse LoginResponse

func (response RefreshToken401JSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RegisterUserRequestObject struct {
	Body *RegisterUserJSONRequestBody
}

type RegisterUserResponseObject interface {
	VisitRegisterUserResponse(w http.ResponseWriter) error
}

type RegisterUser201JSONResponse struct {
	// ExpiresAt Token expiration time
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Token JWT authentication token
	Token *string `json:"token,omitempty"`
	User  *User   `json:"user,omitempty"`
}

func (response RegisterUser201JSONResponse) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type RegisterUser400JSONResponse Error

func (response RegisterUser400JSONResponse) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RegisterUser500JSONResponse Error

func (response RegisterUser500JSONResponse) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetBalancesRequestObject struct {
	Params GetBalancesParams
}

type GetBalancesResponseObject interface {
	VisitGetBalancesResponse(w http.ResponseWriter) error
}

type GetBalances200JSONResponse BalanceSummary

func (response GetBalances200JSONResponse) VisitGetBalancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBalances401Response = N401Response

func (response GetBalances401Response) VisitGetBalancesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetBalances500JSONResponse struct{ N500JSONResponse }

func (response GetBalances500JSONResponse) VisitGetBalancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetBalances501Response = N501Response

func (response GetBalances501Response) VisitGetBalancesResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type ListCategoriesRequestObject struct {
	Params ListCategoriesParams
}

type ListCategoriesResponseObject interface {
	VisitListCategoriesResponse(w http.ResponseWriter) error
}

type ListCategories200JSONResponse struct {
	Categories *[]Category `json:"categories,omitempty"`

	// Total Total number of categories
	Total *int `json:"total,omitempty"`
}

func (response ListCategories200JSONResponse) VisitListCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListCategories401Response = N401Response

func (response ListCategories401Response) VisitListCategoriesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListCategories500JSONResponse struct{ N500JSONResponse }

func (response ListCategories500JSONResponse) VisitListCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateCategoryRequestObject struct {
	Body *CreateCategoryJSONRequestBody
}

type CreateCategoryResponseObject interface {
	VisitCreateCategoryResponse(w http.ResponseWriter) error
}

type CreateCategory201JSONResponse Category

func (response CreateCategory201JSONResponse) VisitCreateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateCategory400JSONResponse struct{ N400JSONResponse }

func (response CreateCategory400JSONResponse) VisitCreateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateCategory401Response = N401Response

func (response CreateCategory401Response) VisitCreateCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateCategory500JSONResponse struct{ N500JSONResponse }

func (response CreateCategory500JSONResponse) VisitCreateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategoryRequestObject struct {
	Id string `json:"id"`
}

type DeleteCategoryResponseObject interface {
	VisitDeleteCategoryResponse(w http.ResponseWriter) error
}

type DeleteCategory204Response = N204Response

func (response DeleteCategory204Response) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCategory400JSONResponse struct{ N400JSONResponse }

func (response DeleteCategory400JSONResponse) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategory401Response = N401Response

func (response DeleteCategory401Response) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteCategory404JSONResponse struct{ N404JSONResponse }

func (response DeleteCategory404JSONResponse) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategory500JSONResponse struct{ N500JSONResponse }

func (response DeleteCategory500JSONResponse) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCategoryRequestObject struct {
	Id   string `json:"id"`
	Body *UpdateCategoryJSONRequestBody
}

type UpdateCategoryResponseObject interface {
	VisitUpdateCategoryResponse(w http.ResponseWriter) error
}

type UpdateCategory200JSONResponse Category

func (response UpdateCategory200JSONResponse) VisitUpdateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCategory400JSONResponse struct{ N400JSONResponse }

func (response UpdateCategory400JSONResponse) VisitUpdateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCategory404JSONResponse struct{ N404JSONResponse }

func (response UpdateCategory404JSONResponse) VisitUpdateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCategory500JSONResponse struct{ N500JSONResponse }

func (response UpdateCategory500JSONResponse) VisitUpdateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ActivateCategoryRequestObject struct {
	Id string `json:"id"`
}

type ActivateCategoryResponseObject interface {
	VisitActivateCategoryResponse(w http.ResponseWriter) error
}

type ActivateCategory204Response = N204Response

func (response ActivateCategory204Response) VisitActivateCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ActivateCategory400JSONResponse struct{ N400JSONResponse }

func (response ActivateCategory400JSONResponse) VisitActivateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ActivateCategory401Response = N401Response

func (response ActivateCategory401Response) VisitActivateCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ActivateCategory404JSONResponse struct{ N404JSONResponse }

func (response ActivateCategory404JSONResponse) VisitActivateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ActivateCategory500JSONResponse struct{ N500JSONResponse }

func (response ActivateCategory500JSONResponse) VisitActivateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeactivateCategoryRequestObject struct {
	Id string `json:"id"`
}

type DeactivateCategoryResponseObject interface {
	VisitDeactivateCategoryResponse(w http.ResponseWriter) error
}

type DeactivateCategory204Response = N204Response

func (response DeactivateCategory204Response) VisitDeactivateCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeactivateCategory400JSONResponse struct{ N400JSONResponse }

func (response DeactivateCategory400JSONResponse) VisitDeactivateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeactivateCategory401Response = N401Response

func (response DeactivateCategory401Response) VisitDeactivateCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeactivateCategory404JSONResponse struct{ N404JSONResponse }

func (response DeactivateCategory404JSONResponse) VisitDeactivateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeactivateCategory500JSONResponse struct{ N500JSONResponse }

func (response DeactivateCategory500JSONResponse) VisitDeactivateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetExchangeRatesRequestObject struct {
	Params GetExchangeRatesParams
}

type GetExchangeRatesResponseObject interface {
	VisitGetExchangeRatesResponse(w http.ResponseWriter) error
}

type GetExchangeRates200JSONResponse ExchangeRates

func (response GetExchangeRates200JSONResponse) VisitGetExchangeRatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetExchangeRates400JSONResponse struct{ N400JSONResponse }

func (response GetExchangeRates400JSONResponse) VisitGetExchangeRatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetExchangeRates401Response = N401Response

func (response GetExchangeRates401Response) VisitGetExchangeRatesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetExchangeRates500JSONResponse struct{ N500JSONResponse }

func (response GetExchangeRates500JSONResponse) VisitGetExchangeRatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListExpendituresRequestObject struct {
	Params ListExpendituresParams
}

type ListExpendituresResponseObject interface {
	VisitListExpendituresResponse(w http.ResponseWriter) error
}

type ListExpenditures200JSONResponse ExpenditureList

func (response ListExpenditures200JSONResponse) VisitListExpendituresResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListExpenditures401Response = N401Response

func (response ListExpenditures401Response) VisitListExpendituresResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListExpenditures500JSONResponse struct{ N500JSONResponse }

func (response ListExpenditures500JSONResponse) VisitListExpendituresResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateExpenditureRequestObject struct {
	Body *CreateExpenditureJSONRequestBody
}

type CreateExpenditureResponseObject interface {
	VisitCreateExpenditureResponse(w http.ResponseWriter) error
}

type CreateExpenditure201JSONResponse Expenditure

func (response CreateExpenditure201JSONResponse) VisitCreateExpenditureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateExpenditure400JSONResponse struct{ N400JSONResponse }

func (response CreateExpenditure400JSONResponse) VisitCreateExpenditureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateExpenditure401Response = N401Response

func (response CreateExpenditure401Response) VisitCreateExpenditureResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateExpenditure409JSONResponse struct{ N409JSONResponse }

func (response CreateExpenditure409JSONResponse) VisitCreateExpenditureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateExpenditure500JSONResponse struct{ N500JSONResponse }

func (response CreateExpenditure500JSONResponse) VisitCreateExpenditureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetExpenditureRequestObject struct {
	Id string `json:"id"`
}

type GetExpenditureResponseObject interface {
	VisitGetExpenditureResponse(w http.ResponseWriter) error
}

type GetExpenditure200JSONResponse Expenditure

func (response GetExpenditure200JSONResponse) VisitGetExpenditureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetExpenditure401Response = N401Response

func (response GetExpenditure401Response) VisitGetExpenditureResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetExpenditure404JSONResponse struct{ N404JSONResponse }

func (response GetExpenditure404JSONResponse) VisitGetExpenditureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetExpenditure500JSONResponse struct{ N500JSONResponse }

func (response GetExpenditure500JSONResponse) VisitGetExpenditureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RollbackExpenditureRequestObject struct {
	Id   string `json:"id"`
	Body *RollbackExpenditureJSONRequestBody
}

type RollbackExpenditureResponseObject interface {
	VisitRollbackExpenditureResponse(w http.ResponseWriter) error
}

type RollbackExpenditure201Response struct {
}

func (response RollbackExpenditure201Response) VisitRollbackExpenditureResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type RollbackExpenditure404Response struct {
}

func (response RollbackExpenditure404Response) VisitRollbackExpenditureResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type RollbackExpenditure409Response struct {
}

func (response RollbackExpenditure409Response) VisitRollbackExpenditureResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type ListHouseholdMembersRequestObject struct {
	Params ListHouseholdMembersParams
}

type ListHouseholdMembersResponseObject interface {
	VisitListHouseholdMembersResponse(w http.ResponseWriter) error
}

type ListHouseholdMembers200JSONResponse HouseholdMemberList

func (response ListHouseholdMembers200JSONResponse) VisitListHouseholdMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListHouseholdMembers401Response = N401Response

func (response ListHouseholdMembers401Response) VisitListHouseholdMembersResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListHouseholdMembers500JSONResponse struct{ N500JSONResponse }

func (response ListHouseholdMembers500JSONResponse) VisitListHouseholdMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateHouseholdMemberRequestObject struct {
	Body *CreateHouseholdMemberJSONRequestBody
}

type CreateHouseholdMemberResponseObject interface {
	VisitCreateHouseholdMemberResponse(w http.ResponseWriter) error
}

type CreateHouseholdMember201JSONResponse HouseholdMember

func (response CreateHouseholdMember201JSONResponse) VisitCreateHouseholdMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateHouseholdMember400JSONResponse struct{ N400JSONResponse }

func (response CreateHouseholdMember400JSONResponse) VisitCreateHouseholdMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateHouseholdMember401Response = N401Response

func (response CreateHouseholdMember401Response) VisitCreateHouseholdMemberResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateHouseholdMember500JSONResponse struct{ N500JSONResponse }

func (response CreateHouseholdMember500JSONResponse) VisitCreateHouseholdMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteHouseholdMemberRequestObject struct {
	Id string `json:"id"`
}

type DeleteHouseholdMemberResponseObject interface {
	VisitDeleteHouseholdMemberResponse(w http.ResponseWriter) error
}

type DeleteHouseholdMember204Response = N204Response

func (response DeleteHouseholdMember204Response) VisitDeleteHouseholdMemberResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteHouseholdMember400JSONResponse struct{ N400JSONResponse }

func (response DeleteHouseholdMember400JSONResponse) VisitDeleteHouseholdMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteHouseholdMember401Response = N401Response

func (response DeleteHouseholdMember401Response) VisitDeleteHouseholdMemberResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteHouseholdMember404JSONResponse struct{ N404JSONResponse }

func (response DeleteHouseholdMember404JSONResponse) VisitDeleteHouseholdMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteHouseholdMember500JSONResponse struct{ N500JSONResponse }

func (response DeleteHouseholdMember500JSONResponse) VisitDeleteHouseholdMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetHouseholdMemberRequestObject struct {
	Id string `json:"id"`
}

type GetHouseholdMemberResponseObject interface {
	VisitGetHouseholdMemberResponse(w http.ResponseWriter) error
}

type GetHouseholdMember200JSONResponse HouseholdMember

func (response GetHouseholdMember200JSONResponse) VisitGetHouseholdMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHouseholdMember401Response = N401Response

func (response GetHouseholdMember401Response) VisitGetHouseholdMemberResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetHouseholdMember404JSONResponse struct{ N404JSONResponse }

func (response GetHouseholdMember404JSONResponse) VisitGetHouseholdMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetHouseholdMember500JSONResponse struct{ N500JSONResponse }

func (response GetHouseholdMember500JSONResponse) VisitGetHouseholdMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateHouseholdMemberRequestObject struct {
	Id   string `json:"id"`
	Body *UpdateHouseholdMemberJSONRequestBody
}

type UpdateHouseholdMemberResponseObject interface {
	VisitUpdateHouseholdMemberResponse(w http.ResponseWriter) error
}

type UpdateHouseholdMember200JSONResponse HouseholdMember

func (response UpdateHouseholdMember200JSONResponse) VisitUpdateHouseholdMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateHouseholdMember400JSONResponse struct{ N400JSONResponse }

func (response UpdateHouseholdMember400JSONResponse) VisitUpdateHouseholdMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateHouseholdMember401Response = N401Response

func (response UpdateHouseholdMember401Response) VisitUpdateHouseholdMemberResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateHouseholdMember404JSONResponse struct{ N404JSONResponse }

func (response UpdateHouseholdMember404JSONResponse) VisitUpdateHouseholdMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateHouseholdMember500JSONResponse struct{ N500JSONResponse }

func (response UpdateHouseholdMember500JSONResponse) VisitUpdateHouseholdMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ActivateHouseholdMemberRequestObject struct {
	Id string `json:"id"`
}

type ActivateHouseholdMemberResponseObject interface {
	VisitActivateHouseholdMemberResponse(w http.ResponseWriter) error
}

type ActivateHouseholdMember204Response = N204Response

func (response ActivateHouseholdMember204Response) VisitActivateHouseholdMemberResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ActivateHouseholdMember400JSONResponse struct{ N400JSONResponse }

func (response ActivateHouseholdMember400JSONResponse) VisitActivateHouseholdMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ActivateHouseholdMember401Response = N401Response

func (response ActivateHouseholdMember401Response) VisitActivateHouseholdMemberResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ActivateHouseholdMember404JSONResponse struct{ N404JSONResponse }

func (response ActivateHouseholdMember404JSONResponse) VisitActivateHouseholdMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ActivateHouseholdMember500JSONResponse struct{ N500JSONResponse }

func (response ActivateHouseholdMember500JSONResponse) VisitActivateHouseholdMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeactivateHouseholdMemberRequestObject struct {
	Id string `json:"id"`
}

type DeactivateHouseholdMemberResponseObject interface {
	VisitDeactivateHouseholdMemberResponse(w http.ResponseWriter) error
}

type DeactivateHouseholdMember204Response = N204Response

func (response DeactivateHouseholdMember204Response) VisitDeactivateHouseholdMemberResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeactivateHouseholdMember400JSONResponse struct{ N400JSONResponse }

func (response DeactivateHouseholdMember400JSONResponse) VisitDeactivateHouseholdMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeactivateHouseholdMember401Response = N401Response

func (response DeactivateHouseholdMember401Response) VisitDeactivateHouseholdMemberResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeactivateHouseholdMember404JSONResponse struct{ N404JSONResponse }

func (response DeactivateHouseholdMember404JSONResponse) VisitDeactivateHouseholdMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeactivateHouseholdMember500JSONResponse struct{ N500JSONResponse }

func (response DeactivateHouseholdMember500JSONResponse) VisitDeactivateHouseholdMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListIngressesRequestObject struct {
	Params ListIngressesParams
}

type ListIngressesResponseObject interface {
	VisitListIngressesResponse(w http.ResponseWriter) error
}

type ListIngresses200JSONResponse []IngressList

func (response ListIngresses200JSONResponse) VisitListIngressesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListIngresses401Response = N401Response

func (response ListIngresses401Response) VisitListIngressesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListIngresses500JSONResponse struct{ N500JSONResponse }

func (response ListIngresses500JSONResponse) VisitListIngressesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateIngressRequestObject struct {
	Body *CreateIngressJSONRequestBody
}

type CreateIngressResponseObject interface {
	VisitCreateIngressResponse(w http.ResponseWriter) error
}

type CreateIngress201JSONResponse Ingress

func (response CreateIngress201JSONResponse) VisitCreateIngressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateIngress400JSONResponse struct{ N400JSONResponse }

func (response CreateIngress400JSONResponse) VisitCreateIngressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateIngress401Response = N401Response

func (response CreateIngress401Response) VisitCreateIngressResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateIngress500JSONResponse struct{ N500JSONResponse }

func (response CreateIngress500JSONResponse) VisitCreateIngressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetIngressRequestObject struct {
	Id string `json:"id"`
}

type GetIngressResponseObject interface {
	VisitGetIngressResponse(w http.ResponseWriter) error
}

type GetIngress200JSONResponse Ingress

func (response GetIngress200JSONResponse) VisitGetIngressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetIngress401Response = N401Response

func (response GetIngress401Response) VisitGetIngressResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetIngress404JSONResponse struct{ N404JSONResponse }

func (response GetIngress404JSONResponse) VisitGetIngressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetIngress500JSONResponse struct{ N500JSONResponse }

func (response GetIngress500JSONResponse) VisitGetIngressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIngressRecurrencePatternRequestObject struct {
	Id        string `json:"id"`
	PatternId string `json:"pattern_id"`
}

type DeleteIngressRecurrencePatternResponseObject interface {
	VisitDeleteIngressRecurrencePatternResponse(w http.ResponseWriter) error
}

type DeleteIngressRecurrencePattern204Response = N204Response

func (response DeleteIngressRecurrencePattern204Response) VisitDeleteIngressRecurrencePatternResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIngressRecurrencePattern401Response = N401Response

func (response DeleteIngressRecurrencePattern401Response) VisitDeleteIngressRecurrencePatternResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteIngressRecurrencePattern404JSONResponse struct{ N404JSONResponse }

func (response DeleteIngressRecurrencePattern404JSONResponse) VisitDeleteIngressRecurrencePatternResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIngressRecurrencePattern500JSONResponse struct{ N500JSONResponse }

func (response DeleteIngressRecurrencePattern500JSONResponse) VisitDeleteIngressRecurrencePatternResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetIngressRecurrencePatternRequestObject struct {
	Id        string `json:"id"`
	PatternId string `json:"pattern_id"`
}

type GetIngressRecurrencePatternResponseObject interface {
	VisitGetIngressRecurrencePatternResponse(w http.ResponseWriter) error
}

type GetIngressRecurrencePattern200JSONResponse struct {
	Data *RecurrencePattern `json:"data,omitempty"`
}

func (response GetIngressRecurrencePattern200JSONResponse) VisitGetIngressRecurrencePatternResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetIngressRecurrencePattern401Response = N401Response

func (response GetIngressRecurrencePattern401Response) VisitGetIngressRecurrencePatternResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetIngressRecurrencePattern404JSONResponse struct{ N404JSONResponse }

func (response GetIngressRecurrencePattern404JSONResponse) VisitGetIngressRecurrencePatternResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetIngressRecurrencePattern500JSONResponse struct{ N500JSONResponse }

func (response GetIngressRecurrencePattern500JSONResponse) VisitGetIngressRecurrencePatternResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIngressRecurrencePatternRequestObject struct {
	Id        string `json:"id"`
	PatternId string `json:"pattern_id"`
	Body      *UpdateIngressRecurrencePatternJSONRequestBody
}

type UpdateIngressRecurrencePatternResponseObject interface {
	VisitUpdateIngressRecurrencePatternResponse(w http.ResponseWriter) error
}

type UpdateIngressRecurrencePattern200JSONResponse struct {
	Data *RecurrencePattern `json:"data,omitempty"`
}

func (response UpdateIngressRecurrencePattern200JSONResponse) VisitUpdateIngressRecurrencePatternResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIngressRecurrencePattern400JSONResponse struct{ N400JSONResponse }

func (response UpdateIngressRecurrencePattern400JSONResponse) VisitUpdateIngressRecurrencePatternResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIngressRecurrencePattern401Response = N401Response

func (response UpdateIngressRecurrencePattern401Response) VisitUpdateIngressRecurrencePatternResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateIngressRecurrencePattern404JSONResponse struct{ N404JSONResponse }

func (response UpdateIngressRecurrencePattern404JSONResponse) VisitUpdateIngressRecurrencePatternResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIngressRecurrencePattern500JSONResponse struct{ N500JSONResponse }

func (response UpdateIngressRecurrencePattern500JSONResponse) VisitUpdateIngressRecurrencePatternResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RollbackIngressRequestObject struct {
	Id   string `json:"id"`
	Body *RollbackIngressJSONRequestBody
}

type RollbackIngressResponseObject interface {
	VisitRollbackIngressResponse(w http.ResponseWriter) error
}

type RollbackIngress201Response struct {
}

func (response RollbackIngress201Response) VisitRollbackIngressResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type RollbackIngress404Response struct {
}

func (response RollbackIngress404Response) VisitRollbackIngressResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type RollbackIngress409Response struct {
}

func (response RollbackIngress409Response) VisitRollbackIngressResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type CreateIngressRecurrencePatternRequestObject struct {
	Body *CreateIngressRecurrencePatternJSONRequestBody
}

type CreateIngressRecurrencePatternResponseObject interface {
	VisitCreateIngressRecurrencePatternResponse(w http.ResponseWriter) error
}

type CreateIngressRecurrencePattern201JSONResponse struct {
	Data *RecurrencePattern `json:"data,omitempty"`
}

func (response CreateIngressRecurrencePattern201JSONResponse) VisitCreateIngressRecurrencePatternResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateIngressRecurrencePattern400JSONResponse struct{ N400JSONResponse }

func (response CreateIngressRecurrencePattern400JSONResponse) VisitCreateIngressRecurrencePatternResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateIngressRecurrencePattern401Response = N401Response

func (response CreateIngressRecurrencePattern401Response) VisitCreateIngressRecurrencePatternResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateIngressRecurrencePattern404JSONResponse struct{ N404JSONResponse }

func (response CreateIngressRecurrencePattern404JSONResponse) VisitCreateIngressRecurrencePatternResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateIngressRecurrencePattern500JSONResponse struct{ N500JSONResponse }

func (response CreateIngressRecurrencePattern500JSONResponse) VisitCreateIngressRecurrencePatternResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListSavingsGoalsRequestObject struct {
	Params ListSavingsGoalsParams
}

type ListSavingsGoalsResponseObject interface {
	VisitListSavingsGoalsResponse(w http.ResponseWriter) error
}

type ListSavingsGoals200JSONResponse []SavingsGoalList

func (response ListSavingsGoals200JSONResponse) VisitListSavingsGoalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListSavingsGoals401Response = N401Response

func (response ListSavingsGoals401Response) VisitListSavingsGoalsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListSavingsGoals500JSONResponse struct{ N500JSONResponse }

func (response ListSavingsGoals500JSONResponse) VisitListSavingsGoalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateSavingsGoalRequestObject struct {
	Body *CreateSavingsGoalJSONRequestBody
}

type CreateSavingsGoalResponseObject interface {
	VisitCreateSavingsGoalResponse(w http.ResponseWriter) error
}

type CreateSavingsGoal201JSONResponse SavingsGoal

func (response CreateSavingsGoal201JSONResponse) VisitCreateSavingsGoalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateSavingsGoal400JSONResponse struct{ N400JSONResponse }

func (response CreateSavingsGoal400JSONResponse) VisitCreateSavingsGoalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateSavingsGoal401Response = N401Response

func (response CreateSavingsGoal401Response) VisitCreateSavingsGoalResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateSavingsGoal500JSONResponse struct{ N500JSONResponse }

func (response CreateSavingsGoal500JSONResponse) VisitCreateSavingsGoalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSavingsGoalRequestObject struct {
	Id string `json:"id"`
}

type DeleteSavingsGoalResponseObject interface {
	VisitDeleteSavingsGoalResponse(w http.ResponseWriter) error
}

type DeleteSavingsGoal204Response = N204Response

func (response DeleteSavingsGoal204Response) VisitDeleteSavingsGoalResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSavingsGoal401Response = N401Response

func (response DeleteSavingsGoal401Response) VisitDeleteSavingsGoalResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteSavingsGoal404JSONResponse struct{ N404JSONResponse }

func (response DeleteSavingsGoal404JSONResponse) VisitDeleteSavingsGoalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSavingsGoal500JSONResponse struct{ N500JSONResponse }

func (response DeleteSavingsGoal500JSONResponse) VisitDeleteSavingsGoalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSavingsGoalRequestObject struct {
	Id string `json:"id"`
}

type GetSavingsGoalResponseObject interface {
	VisitGetSavingsGoalResponse(w http.ResponseWriter) error
}

type GetSavingsGoal200JSONResponse SavingsGoal

func (response GetSavingsGoal200JSONResponse) VisitGetSavingsGoalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSavingsGoal401Response = N401Response

func (response GetSavingsGoal401Response) VisitGetSavingsGoalResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetSavingsGoal404JSONResponse struct{ N404JSONResponse }

func (response GetSavingsGoal404JSONResponse) VisitGetSavingsGoalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSavingsGoal500JSONResponse struct{ N500JSONResponse }

func (response GetSavingsGoal500JSONResponse) VisitGetSavingsGoalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSavingsGoalRequestObject struct {
	Id   string `json:"id"`
	Body *UpdateSavingsGoalJSONRequestBody
}

type UpdateSavingsGoalResponseObject interface {
	VisitUpdateSavingsGoalResponse(w http.ResponseWriter) error
}

type UpdateSavingsGoal200JSONResponse SavingsGoal

func (response UpdateSavingsGoal200JSONResponse) VisitUpdateSavingsGoalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSavingsGoal400JSONResponse struct{ N400JSONResponse }

func (response UpdateSavingsGoal400JSONResponse) VisitUpdateSavingsGoalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSavingsGoal401Response = N401Response

func (response UpdateSavingsGoal401Response) VisitUpdateSavingsGoalResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateSavingsGoal404JSONResponse struct{ N404JSONResponse }

func (response UpdateSavingsGoal404JSONResponse) VisitUpdateSavingsGoalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSavingsGoal500JSONResponse struct{ N500JSONResponse }

func (response UpdateSavingsGoal500JSONResponse) VisitUpdateSavingsGoalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListSavingsContributionsRequestObject struct {
	Id     string `json:"id"`
	Params ListSavingsContributionsParams
}

type ListSavingsContributionsResponseObject interface {
	VisitListSavingsContributionsResponse(w http.ResponseWriter) error
}

type ListSavingsContributions200JSONResponse []SavingsContribution

func (response ListSavingsContributions200JSONResponse) VisitListSavingsContributionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListSavingsContributions401Response = N401Response

func (response ListSavingsContributions401Response) VisitListSavingsContributionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListSavingsContributions404JSONResponse struct{ N404JSONResponse }

func (response ListSavingsContributions404JSONResponse) VisitListSavingsContributionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListSavingsContributions500JSONResponse struct{ N500JSONResponse }

func (response ListSavingsContributions500JSONResponse) VisitListSavingsContributionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddSavingsContributionRequestObject struct {
	Id   string `json:"id"`
	Body *AddSavingsContributionJSONRequestBody
}

type AddSavingsContributionResponseObject interface {
	VisitAddSavingsContributionResponse(w http.ResponseWriter) error
}

type AddSavingsContribution201JSONResponse SavingsContribution

func (response AddSavingsContribution201JSONResponse) VisitAddSavingsContributionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AddSavingsContribution400JSONResponse struct{ N400JSONResponse }

func (response AddSavingsContribution400JSONResponse) VisitAddSavingsContributionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddSavingsContribution401Response = N401Response

func (response AddSavingsContribution401Response) VisitAddSavingsContributionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AddSavingsContribution404JSONResponse struct{ N404JSONResponse }

func (response AddSavingsContribution404JSONResponse) VisitAddSavingsContributionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddSavingsContribution500JSONResponse struct{ N500JSONResponse }

func (response AddSavingsContribution500JSONResponse) VisitAddSavingsContributionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSavingsProgressRequestObject struct {
	Id string `json:"id"`
}

type GetSavingsProgressResponseObject interface {
	VisitGetSavingsProgressResponse(w http.ResponseWriter) error
}

type GetSavingsProgress200JSONResponse SavingsProgress

func (response GetSavingsProgress200JSONResponse) VisitGetSavingsProgressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSavingsProgress401Response = N401Response

func (response GetSavingsProgress401Response) VisitGetSavingsProgressResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetSavingsProgress404JSONResponse struct{ N404JSONResponse }

func (response GetSavingsProgress404JSONResponse) VisitGetSavingsProgressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSavingsProgress500JSONResponse struct{ N500JSONResponse }

func (response GetSavingsProgress500JSONResponse) VisitGetSavingsProgressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListSavingsTransactionsRequestObject struct {
	Id     string `json:"id"`
	Params ListSavingsTransactionsParams
}

type ListSavingsTransactionsResponseObject interface {
	VisitListSavingsTransactionsResponse(w http.ResponseWriter) error
}

type ListSavingsTransactions200JSONResponse SavingsTransactionList

func (response ListSavingsTransactions200JSONResponse) VisitListSavingsTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListSavingsTransactions400JSONResponse struct{ N400JSONResponse }

func (response ListSavingsTransactions400JSONResponse) VisitListSavingsTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListSavingsTransactions401Response = N401Response

func (response ListSavingsTransactions401Response) VisitListSavingsTransactionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListSavingsTransactions404JSONResponse struct{ N404JSONResponse }

func (response ListSavingsTransactions404JSONResponse) VisitListSavingsTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListSavingsTransactions500JSONResponse struct{ N500JSONResponse }

func (response ListSavingsTransactions500JSONResponse) VisitListSavingsTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListSavingsWithdrawalsRequestObject struct {
	Id     string `json:"id"`
	Params ListSavingsWithdrawalsParams
}

type ListSavingsWithdrawalsResponseObject interface {
	VisitListSavingsWithdrawalsResponse(w http.ResponseWriter) error
}

type ListSavingsWithdrawals200JSONResponse []SavingsWithdrawal

func (response ListSavingsWithdrawals200JSONResponse) VisitListSavingsWithdrawalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListSavingsWithdrawals401Response = N401Response

func (response ListSavingsWithdrawals401Response) VisitListSavingsWithdrawalsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListSavingsWithdrawals404JSONResponse struct{ N404JSONResponse }

func (response ListSavingsWithdrawals404JSONResponse) VisitListSavingsWithdrawalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListSavingsWithdrawals500JSONResponse struct{ N500JSONResponse }

func (response ListSavingsWithdrawals500JSONResponse) VisitListSavingsWithdrawalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddSavingsWithdrawalRequestObject struct {
	Id   string `json:"id"`
	Body *AddSavingsWithdrawalJSONRequestBody
}

type AddSavingsWithdrawalResponseObject interface {
	VisitAddSavingsWithdrawalResponse(w http.ResponseWriter) error
}

type AddSavingsWithdrawal201JSONResponse SavingsWithdrawal

func (response AddSavingsWithdrawal201JSONResponse) VisitAddSavingsWithdrawalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AddSavingsWithdrawal400JSONResponse struct{ N400JSONResponse }

func (response AddSavingsWithdrawal400JSONResponse) VisitAddSavingsWithdrawalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddSavingsWithdrawal401Response = N401Response

func (response AddSavingsWithdrawal401Response) VisitAddSavingsWithdrawalResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AddSavingsWithdrawal404JSONResponse struct{ N404JSONResponse }

func (response AddSavingsWithdrawal404JSONResponse) VisitAddSavingsWithdrawalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddSavingsWithdrawal500JSONResponse struct{ N500JSONResponse }

func (response AddSavingsWithdrawal500JSONResponse) VisitAddSavingsWithdrawalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListTagsRequestObject struct {
}

type ListTagsResponseObject interface {
	VisitListTagsResponse(w http.ResponseWriter) error
}

type ListTags200JSONResponse []Tag

func (response ListTags200JSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTags400JSONResponse struct{ N400JSONResponse }

func (response ListTags400JSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListTags500JSONResponse struct{ N500JSONResponse }

func (response ListTags500JSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateTagRequestObject struct {
	Body *CreateTagJSONRequestBody
}

type CreateTagResponseObject interface {
	VisitCreateTagResponse(w http.ResponseWriter) error
}

type CreateTag201JSONResponse Tag

func (response CreateTag201JSONResponse) VisitCreateTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTag400JSONResponse struct{ N400JSONResponse }

func (response CreateTag400JSONResponse) VisitCreateTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateTag409JSONResponse struct{ N409JSONResponse }

func (response CreateTag409JSONResponse) VisitCreateTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateTag500JSONResponse struct{ N500JSONResponse }

func (response CreateTag500JSONResponse) VisitCreateTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListTagsByTypeRequestObject struct {
	Type TagType `json:"type"`
}

type ListTagsByTypeResponseObject interface {
	VisitListTagsByTypeResponse(w http.ResponseWriter) error
}

type ListTagsByType200JSONResponse []Tag

func (response ListTagsByType200JSONResponse) VisitListTagsByTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTagsByType400JSONResponse struct{ N400JSONResponse }

func (response ListTagsByType400JSONResponse) VisitListTagsByTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListTagsByType401Response = N401Response

func (response ListTagsByType401Response) VisitListTagsByTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListTagsByType404JSONResponse struct{ N404JSONResponse }

func (response ListTagsByType404JSONResponse) VisitListTagsByTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListTagsByType500JSONResponse struct{ N500JSONResponse }

func (response ListTagsByType500JSONResponse) VisitListTagsByTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTagRequestObject struct {
	Id string `json:"id"`
}

type DeleteTagResponseObject interface {
	VisitDeleteTagResponse(w http.ResponseWriter) error
}

type DeleteTag204Response = N204Response

func (response DeleteTag204Response) VisitDeleteTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTag400JSONResponse struct{ N400JSONResponse }

func (response DeleteTag400JSONResponse) VisitDeleteTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTag401Response = N401Response

func (response DeleteTag401Response) VisitDeleteTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteTag404JSONResponse struct{ N404JSONResponse }

func (response DeleteTag404JSONResponse) VisitDeleteTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTag500JSONResponse struct{ N500JSONResponse }

func (response DeleteTag500JSONResponse) VisitDeleteTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListTransactionsRequestObject struct {
	Params ListTransactionsParams
}

type ListTransactionsResponseObject interface {
	VisitListTransactionsResponse(w http.ResponseWriter) error
}

type ListTransactions200JSONResponse TransactionList

func (response ListTransactions200JSONResponse) VisitListTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTransactions400JSONResponse Error

func (response ListTransactions400JSONResponse) VisitListTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListTransactions500JSONResponse Error

func (response ListTransactions500JSONResponse) VisitListTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListTransfersRequestObject struct {
	Params ListTransfersParams
}

type ListTransfersResponseObject interface {
	VisitListTransfersResponse(w http.ResponseWriter) error
}

type ListTransfers200JSONResponse []TransferList

func (response ListTransfers200JSONResponse) VisitListTransfersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTransfers401Response = N401Response

func (response ListTransfers401Response) VisitListTransfersResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListTransfers500JSONResponse struct{ N500JSONResponse }

func (response ListTransfers500JSONResponse) VisitListTransfersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateTransferRequestObject struct {
	Body *CreateTransferJSONRequestBody
}

type CreateTransferResponseObject interface {
	VisitCreateTransferResponse(w http.ResponseWriter) error
}

type CreateTransfer201JSONResponse Transfer

func (response CreateTransfer201JSONResponse) VisitCreateTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTransfer400JSONResponse struct{ N400JSONResponse }

func (response CreateTransfer400JSONResponse) VisitCreateTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateTransfer401Response = N401Response

func (response CreateTransfer401Response) VisitCreateTransferResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateTransfer500JSONResponse struct{ N500JSONResponse }

func (response CreateTransfer500JSONResponse) VisitCreateTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTransferRequestObject struct {
	Id string `json:"id"`
}

type GetTransferResponseObject interface {
	VisitGetTransferResponse(w http.ResponseWriter) error
}

type GetTransfer200JSONResponse Transfer

func (response GetTransfer200JSONResponse) VisitGetTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTransfer401Response = N401Response

func (response GetTransfer401Response) VisitGetTransferResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetTransfer404JSONResponse struct{ N404JSONResponse }

func (response GetTransfer404JSONResponse) VisitGetTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTransfer500JSONResponse struct{ N500JSONResponse }

func (response GetTransfer500JSONResponse) VisitGetTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RollbackTransferRequestObject struct {
	Id   string `json:"id"`
	Body *RollbackTransferJSONRequestBody
}

type RollbackTransferResponseObject interface {
	VisitRollbackTransferResponse(w http.ResponseWriter) error
}

type RollbackTransfer201Response struct {
}

func (response RollbackTransfer201Response) VisitRollbackTransferResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type RollbackTransfer404Response struct {
}

func (response RollbackTransfer404Response) VisitRollbackTransferResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type RollbackTransfer409Response struct {
}

func (response RollbackTransfer409Response) VisitRollbackTransferResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all accounts
	// (GET /accounts)
	ListAccounts(ctx context.Context, request ListAccountsRequestObject) (ListAccountsResponseObject, error)
	// Create a new money account
	// (POST /accounts)
	CreateAccount(ctx context.Context, request CreateAccountRequestObject) (CreateAccountResponseObject, error)
	// Delete account
	// (DELETE /accounts/{id})
	DeleteAccount(ctx context.Context, request DeleteAccountRequestObject) (DeleteAccountResponseObject, error)
	// Get account by ID
	// (GET /accounts/{id})
	GetAccount(ctx context.Context, request GetAccountRequestObject) (GetAccountResponseObject, error)
	// Update account
	// (PUT /accounts/{id})
	UpdateAccount(ctx context.Context, request UpdateAccountRequestObject) (UpdateAccountResponseObject, error)
	// Activate an account
	// (PATCH /accounts/{id}/activate)
	ActivateAccount(ctx context.Context, request ActivateAccountRequestObject) (ActivateAccountResponseObject, error)
	// Checks if account can be deleted
	// (GET /accounts/{id}/can-delete)
	CanDeleteAccount(ctx context.Context, request CanDeleteAccountRequestObject) (CanDeleteAccountResponseObject, error)
	// Deactivate an account
	// (PATCH /accounts/{id}/deactivate)
	DeactivateAccount(ctx context.Context, request DeactivateAccountRequestObject) (DeactivateAccountResponseObject, error)
	// Login to the system
	// (POST /auth/login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Refresh authentication token
	// (POST /auth/refresh)
	RefreshToken(ctx context.Context, request RefreshTokenRequestObject) (RefreshTokenResponseObject, error)
	// Register a new user
	// (POST /auth/register)
	RegisterUser(ctx context.Context, request RegisterUserRequestObject) (RegisterUserResponseObject, error)
	// Get current balances
	// (GET /balances)
	GetBalances(ctx context.Context, request GetBalancesRequestObject) (GetBalancesResponseObject, error)
	// List categories
	// (GET /categories)
	ListCategories(ctx context.Context, request ListCategoriesRequestObject) (ListCategoriesResponseObject, error)
	// Create category
	// (POST /categories)
	CreateCategory(ctx context.Context, request CreateCategoryRequestObject) (CreateCategoryResponseObject, error)
	// Delete category
	// (DELETE /categories/{id})
	DeleteCategory(ctx context.Context, request DeleteCategoryRequestObject) (DeleteCategoryResponseObject, error)
	// Update category
	// (PUT /categories/{id})
	UpdateCategory(ctx context.Context, request UpdateCategoryRequestObject) (UpdateCategoryResponseObject, error)
	// Activate a category
	// (PATCH /categories/{id}/activate)
	ActivateCategory(ctx context.Context, request ActivateCategoryRequestObject) (ActivateCategoryResponseObject, error)
	// Deactivate a category
	// (PATCH /categories/{id}/deactivate)
	DeactivateCategory(ctx context.Context, request DeactivateCategoryRequestObject) (DeactivateCategoryResponseObject, error)
	// Get current exchange rates
	// (GET /exchange-rates)
	GetExchangeRates(ctx context.Context, request GetExchangeRatesRequestObject) (GetExchangeRatesResponseObject, error)
	// List all expenditures
	// (GET /expenditures)
	ListExpenditures(ctx context.Context, request ListExpendituresRequestObject) (ListExpendituresResponseObject, error)
	// Create a new expenditure
	// (POST /expenditures)
	CreateExpenditure(ctx context.Context, request CreateExpenditureRequestObject) (CreateExpenditureResponseObject, error)
	// Get expenditure by ID
	// (GET /expenditures/{id})
	GetExpenditure(ctx context.Context, request GetExpenditureRequestObject) (GetExpenditureResponseObject, error)
	// Rollback an expenditure
	// (POST /expenditures/{id}/rollback)
	RollbackExpenditure(ctx context.Context, request RollbackExpenditureRequestObject) (RollbackExpenditureResponseObject, error)
	// List all household members
	// (GET /household-members)
	ListHouseholdMembers(ctx context.Context, request ListHouseholdMembersRequestObject) (ListHouseholdMembersResponseObject, error)
	// Create a new household member
	// (POST /household-members)
	CreateHouseholdMember(ctx context.Context, request CreateHouseholdMemberRequestObject) (CreateHouseholdMemberResponseObject, error)
	// Delete household member
	// (DELETE /household-members/{id})
	DeleteHouseholdMember(ctx context.Context, request DeleteHouseholdMemberRequestObject) (DeleteHouseholdMemberResponseObject, error)
	// Get household member by ID
	// (GET /household-members/{id})
	GetHouseholdMember(ctx context.Context, request GetHouseholdMemberRequestObject) (GetHouseholdMemberResponseObject, error)
	// Update household member
	// (PUT /household-members/{id})
	UpdateHouseholdMember(ctx context.Context, request UpdateHouseholdMemberRequestObject) (UpdateHouseholdMemberResponseObject, error)
	// Activate household member by ID
	// (PATCH /household-members/{id}/activate)
	ActivateHouseholdMember(ctx context.Context, request ActivateHouseholdMemberRequestObject) (ActivateHouseholdMemberResponseObject, error)
	// Deactivate household member by ID
	// (PATCH /household-members/{id}/deactivate)
	DeactivateHouseholdMember(ctx context.Context, request DeactivateHouseholdMemberRequestObject) (DeactivateHouseholdMemberResponseObject, error)
	// List all ingresses
	// (GET /ingresses)
	ListIngresses(ctx context.Context, request ListIngressesRequestObject) (ListIngressesResponseObject, error)
	// Create a new ingress
	// (POST /ingresses)
	CreateIngress(ctx context.Context, request CreateIngressRequestObject) (CreateIngressResponseObject, error)
	// Get ingress by ID
	// (GET /ingresses/{id})
	GetIngress(ctx context.Context, request GetIngressRequestObject) (GetIngressResponseObject, error)
	// Delete a recurrence pattern
	// (DELETE /ingresses/{id}/recurrence-pattern/{pattern_id})
	DeleteIngressRecurrencePattern(ctx context.Context, request DeleteIngressRecurrencePatternRequestObject) (DeleteIngressRecurrencePatternResponseObject, error)
	// Get a specific recurrence pattern
	// (GET /ingresses/{id}/recurrence-pattern/{pattern_id})
	GetIngressRecurrencePattern(ctx context.Context, request GetIngressRecurrencePatternRequestObject) (GetIngressRecurrencePatternResponseObject, error)
	// Update a recurrence pattern
	// (PUT /ingresses/{id}/recurrence-pattern/{pattern_id})
	UpdateIngressRecurrencePattern(ctx context.Context, request UpdateIngressRecurrencePatternRequestObject) (UpdateIngressRecurrencePatternResponseObject, error)
	// Rollback an Ingress
	// (POST /ingresses/{id}/rollback)
	RollbackIngress(ctx context.Context, request RollbackIngressRequestObject) (RollbackIngressResponseObject, error)
	// Create a recurrence pattern for Ingresses
	// (POST /recurrence-pattern)
	CreateIngressRecurrencePattern(ctx context.Context, request CreateIngressRecurrencePatternRequestObject) (CreateIngressRecurrencePatternResponseObject, error)
	// List all savings goals
	// (GET /savings)
	ListSavingsGoals(ctx context.Context, request ListSavingsGoalsRequestObject) (ListSavingsGoalsResponseObject, error)
	// Create a new savings goal
	// (POST /savings)
	CreateSavingsGoal(ctx context.Context, request CreateSavingsGoalRequestObject) (CreateSavingsGoalResponseObject, error)
	// Delete savings goal
	// (DELETE /savings/{id})
	DeleteSavingsGoal(ctx context.Context, request DeleteSavingsGoalRequestObject) (DeleteSavingsGoalResponseObject, error)
	// Get savings goal by ID
	// (GET /savings/{id})
	GetSavingsGoal(ctx context.Context, request GetSavingsGoalRequestObject) (GetSavingsGoalResponseObject, error)
	// Update savings goal
	// (PUT /savings/{id})
	UpdateSavingsGoal(ctx context.Context, request UpdateSavingsGoalRequestObject) (UpdateSavingsGoalResponseObject, error)
	// List contributions for a savings goal
	// (GET /savings/{id}/contributions)
	ListSavingsContributions(ctx context.Context, request ListSavingsContributionsRequestObject) (ListSavingsContributionsResponseObject, error)
	// Add contribution to savings goal
	// (POST /savings/{id}/contributions)
	AddSavingsContribution(ctx context.Context, request AddSavingsContributionRequestObject) (AddSavingsContributionResponseObject, error)
	// Get savings goal progress
	// (GET /savings/{id}/progress)
	GetSavingsProgress(ctx context.Context, request GetSavingsProgressRequestObject) (GetSavingsProgressResponseObject, error)
	// List transactions for a savings goal
	// (GET /savings/{id}/transactions)
	ListSavingsTransactions(ctx context.Context, request ListSavingsTransactionsRequestObject) (ListSavingsTransactionsResponseObject, error)
	// List withdrawals from a savings goal
	// (GET /savings/{id}/withdrawals)
	ListSavingsWithdrawals(ctx context.Context, request ListSavingsWithdrawalsRequestObject) (ListSavingsWithdrawalsResponseObject, error)
	// Add withdrawal from savings goal
	// (POST /savings/{id}/withdrawals)
	AddSavingsWithdrawal(ctx context.Context, request AddSavingsWithdrawalRequestObject) (AddSavingsWithdrawalResponseObject, error)
	// List tags
	// (GET /tags)
	ListTags(ctx context.Context, request ListTagsRequestObject) (ListTagsResponseObject, error)
	// Create tag
	// (POST /tags)
	CreateTag(ctx context.Context, request CreateTagRequestObject) (CreateTagResponseObject, error)
	// List tags by type
	// (GET /tags/type/{type})
	ListTagsByType(ctx context.Context, request ListTagsByTypeRequestObject) (ListTagsByTypeResponseObject, error)
	// Delete tag
	// (DELETE /tags/{id})
	DeleteTag(ctx context.Context, request DeleteTagRequestObject) (DeleteTagResponseObject, error)
	// List all transactions
	// (GET /transactions)
	ListTransactions(ctx context.Context, request ListTransactionsRequestObject) (ListTransactionsResponseObject, error)
	// List all transfers
	// (GET /transfers)
	ListTransfers(ctx context.Context, request ListTransfersRequestObject) (ListTransfersResponseObject, error)
	// Create a new money transfer
	// (POST /transfers)
	CreateTransfer(ctx context.Context, request CreateTransferRequestObject) (CreateTransferResponseObject, error)
	// Get transfer by ID
	// (GET /transfers/{id})
	GetTransfer(ctx context.Context, request GetTransferRequestObject) (GetTransferResponseObject, error)
	// Rollback a Transfer
	// (POST /transfers/{id}/rollback)
	RollbackTransfer(ctx context.Context, request RollbackTransferRequestObject) (RollbackTransferResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListAccounts operation middleware
func (sh *strictHandler) ListAccounts(w http.ResponseWriter, r *http.Request, params ListAccountsParams) {
	var request ListAccountsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAccounts(ctx, request.(ListAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAccounts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAccountsResponseObject); ok {
		if err := validResponse.VisitListAccountsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAccount operation middleware
func (sh *strictHandler) CreateAccount(w http.ResponseWriter, r *http.Request) {
	var request CreateAccountRequestObject

	var body CreateAccountJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAccount(ctx, request.(CreateAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAccount")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAccountResponseObject); ok {
		if err := validResponse.VisitCreateAccountResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAccount operation middleware
func (sh *strictHandler) DeleteAccount(w http.ResponseWriter, r *http.Request, id string) {
	var request DeleteAccountRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAccount(ctx, request.(DeleteAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAccount")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAccountResponseObject); ok {
		if err := validResponse.VisitDeleteAccountResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAccount operation middleware
func (sh *strictHandler) GetAccount(w http.ResponseWriter, r *http.Request, id string) {
	var request GetAccountRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccount(ctx, request.(GetAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccount")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAccountResponseObject); ok {
		if err := validResponse.VisitGetAccountResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAccount operation middleware
func (sh *strictHandler) UpdateAccount(w http.ResponseWriter, r *http.Request, id string) {
	var request UpdateAccountRequestObject

	request.Id = id

	var body UpdateAccountJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAccount(ctx, request.(UpdateAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAccount")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateAccountResponseObject); ok {
		if err := validResponse.VisitUpdateAccountResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ActivateAccount operation middleware
func (sh *strictHandler) ActivateAccount(w http.ResponseWriter, r *http.Request, id string) {
	var request ActivateAccountRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ActivateAccount(ctx, request.(ActivateAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ActivateAccount")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ActivateAccountResponseObject); ok {
		if err := validResponse.VisitActivateAccountResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CanDeleteAccount operation middleware
func (sh *strictHandler) CanDeleteAccount(w http.ResponseWriter, r *http.Request, id string) {
	var request CanDeleteAccountRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CanDeleteAccount(ctx, request.(CanDeleteAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CanDeleteAccount")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CanDeleteAccountResponseObject); ok {
		if err := validResponse.VisitCanDeleteAccountResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeactivateAccount operation middleware
func (sh *strictHandler) DeactivateAccount(w http.ResponseWriter, r *http.Request, id string) {
	var request DeactivateAccountRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeactivateAccount(ctx, request.(DeactivateAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeactivateAccount")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeactivateAccountResponseObject); ok {
		if err := validResponse.VisitDeactivateAccountResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(w http.ResponseWriter, r *http.Request) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshToken operation middleware
func (sh *strictHandler) RefreshToken(w http.ResponseWriter, r *http.Request) {
	var request RefreshTokenRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshToken(ctx, request.(RefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshToken")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RefreshTokenResponseObject); ok {
		if err := validResponse.VisitRefreshTokenResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterUser operation middleware
func (sh *strictHandler) RegisterUser(w http.ResponseWriter, r *http.Request) {
	var request RegisterUserRequestObject

	var body RegisterUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterUser(ctx, request.(RegisterUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RegisterUserResponseObject); ok {
		if err := validResponse.VisitRegisterUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBalances operation middleware
func (sh *strictHandler) GetBalances(w http.ResponseWriter, r *http.Request, params GetBalancesParams) {
	var request GetBalancesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBalances(ctx, request.(GetBalancesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBalances")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBalancesResponseObject); ok {
		if err := validResponse.VisitGetBalancesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListCategories operation middleware
func (sh *strictHandler) ListCategories(w http.ResponseWriter, r *http.Request, params ListCategoriesParams) {
	var request ListCategoriesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListCategories(ctx, request.(ListCategoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListCategories")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListCategoriesResponseObject); ok {
		if err := validResponse.VisitListCategoriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateCategory operation middleware
func (sh *strictHandler) CreateCategory(w http.ResponseWriter, r *http.Request) {
	var request CreateCategoryRequestObject

	var body CreateCategoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCategory(ctx, request.(CreateCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateCategoryResponseObject); ok {
		if err := validResponse.VisitCreateCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCategory operation middleware
func (sh *strictHandler) DeleteCategory(w http.ResponseWriter, r *http.Request, id string) {
	var request DeleteCategoryRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCategory(ctx, request.(DeleteCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteCategoryResponseObject); ok {
		if err := validResponse.VisitDeleteCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateCategory operation middleware
func (sh *strictHandler) UpdateCategory(w http.ResponseWriter, r *http.Request, id string) {
	var request UpdateCategoryRequestObject

	request.Id = id

	var body UpdateCategoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCategory(ctx, request.(UpdateCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateCategoryResponseObject); ok {
		if err := validResponse.VisitUpdateCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ActivateCategory operation middleware
func (sh *strictHandler) ActivateCategory(w http.ResponseWriter, r *http.Request, id string) {
	var request ActivateCategoryRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ActivateCategory(ctx, request.(ActivateCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ActivateCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ActivateCategoryResponseObject); ok {
		if err := validResponse.VisitActivateCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeactivateCategory operation middleware
func (sh *strictHandler) DeactivateCategory(w http.ResponseWriter, r *http.Request, id string) {
	var request DeactivateCategoryRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeactivateCategory(ctx, request.(DeactivateCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeactivateCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeactivateCategoryResponseObject); ok {
		if err := validResponse.VisitDeactivateCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetExchangeRates operation middleware
func (sh *strictHandler) GetExchangeRates(w http.ResponseWriter, r *http.Request, params GetExchangeRatesParams) {
	var request GetExchangeRatesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetExchangeRates(ctx, request.(GetExchangeRatesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetExchangeRates")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetExchangeRatesResponseObject); ok {
		if err := validResponse.VisitGetExchangeRatesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListExpenditures operation middleware
func (sh *strictHandler) ListExpenditures(w http.ResponseWriter, r *http.Request, params ListExpendituresParams) {
	var request ListExpendituresRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListExpenditures(ctx, request.(ListExpendituresRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListExpenditures")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListExpendituresResponseObject); ok {
		if err := validResponse.VisitListExpendituresResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateExpenditure operation middleware
func (sh *strictHandler) CreateExpenditure(w http.ResponseWriter, r *http.Request) {
	var request CreateExpenditureRequestObject

	var body CreateExpenditureJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateExpenditure(ctx, request.(CreateExpenditureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateExpenditure")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateExpenditureResponseObject); ok {
		if err := validResponse.VisitCreateExpenditureResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetExpenditure operation middleware
func (sh *strictHandler) GetExpenditure(w http.ResponseWriter, r *http.Request, id string) {
	var request GetExpenditureRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetExpenditure(ctx, request.(GetExpenditureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetExpenditure")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetExpenditureResponseObject); ok {
		if err := validResponse.VisitGetExpenditureResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RollbackExpenditure operation middleware
func (sh *strictHandler) RollbackExpenditure(w http.ResponseWriter, r *http.Request, id string) {
	var request RollbackExpenditureRequestObject

	request.Id = id

	var body RollbackExpenditureJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RollbackExpenditure(ctx, request.(RollbackExpenditureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RollbackExpenditure")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RollbackExpenditureResponseObject); ok {
		if err := validResponse.VisitRollbackExpenditureResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListHouseholdMembers operation middleware
func (sh *strictHandler) ListHouseholdMembers(w http.ResponseWriter, r *http.Request, params ListHouseholdMembersParams) {
	var request ListHouseholdMembersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListHouseholdMembers(ctx, request.(ListHouseholdMembersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListHouseholdMembers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListHouseholdMembersResponseObject); ok {
		if err := validResponse.VisitListHouseholdMembersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateHouseholdMember operation middleware
func (sh *strictHandler) CreateHouseholdMember(w http.ResponseWriter, r *http.Request) {
	var request CreateHouseholdMemberRequestObject

	var body CreateHouseholdMemberJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateHouseholdMember(ctx, request.(CreateHouseholdMemberRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateHouseholdMember")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateHouseholdMemberResponseObject); ok {
		if err := validResponse.VisitCreateHouseholdMemberResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteHouseholdMember operation middleware
func (sh *strictHandler) DeleteHouseholdMember(w http.ResponseWriter, r *http.Request, id string) {
	var request DeleteHouseholdMemberRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteHouseholdMember(ctx, request.(DeleteHouseholdMemberRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteHouseholdMember")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteHouseholdMemberResponseObject); ok {
		if err := validResponse.VisitDeleteHouseholdMemberResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHouseholdMember operation middleware
func (sh *strictHandler) GetHouseholdMember(w http.ResponseWriter, r *http.Request, id string) {
	var request GetHouseholdMemberRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHouseholdMember(ctx, request.(GetHouseholdMemberRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHouseholdMember")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHouseholdMemberResponseObject); ok {
		if err := validResponse.VisitGetHouseholdMemberResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateHouseholdMember operation middleware
func (sh *strictHandler) UpdateHouseholdMember(w http.ResponseWriter, r *http.Request, id string) {
	var request UpdateHouseholdMemberRequestObject

	request.Id = id

	var body UpdateHouseholdMemberJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateHouseholdMember(ctx, request.(UpdateHouseholdMemberRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateHouseholdMember")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateHouseholdMemberResponseObject); ok {
		if err := validResponse.VisitUpdateHouseholdMemberResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ActivateHouseholdMember operation middleware
func (sh *strictHandler) ActivateHouseholdMember(w http.ResponseWriter, r *http.Request, id string) {
	var request ActivateHouseholdMemberRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ActivateHouseholdMember(ctx, request.(ActivateHouseholdMemberRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ActivateHouseholdMember")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ActivateHouseholdMemberResponseObject); ok {
		if err := validResponse.VisitActivateHouseholdMemberResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeactivateHouseholdMember operation middleware
func (sh *strictHandler) DeactivateHouseholdMember(w http.ResponseWriter, r *http.Request, id string) {
	var request DeactivateHouseholdMemberRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeactivateHouseholdMember(ctx, request.(DeactivateHouseholdMemberRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeactivateHouseholdMember")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeactivateHouseholdMemberResponseObject); ok {
		if err := validResponse.VisitDeactivateHouseholdMemberResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListIngresses operation middleware
func (sh *strictHandler) ListIngresses(w http.ResponseWriter, r *http.Request, params ListIngressesParams) {
	var request ListIngressesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListIngresses(ctx, request.(ListIngressesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListIngresses")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListIngressesResponseObject); ok {
		if err := validResponse.VisitListIngressesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateIngress operation middleware
func (sh *strictHandler) CreateIngress(w http.ResponseWriter, r *http.Request) {
	var request CreateIngressRequestObject

	var body CreateIngressJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIngress(ctx, request.(CreateIngressRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIngress")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateIngressResponseObject); ok {
		if err := validResponse.VisitCreateIngressResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetIngress operation middleware
func (sh *strictHandler) GetIngress(w http.ResponseWriter, r *http.Request, id string) {
	var request GetIngressRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetIngress(ctx, request.(GetIngressRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIngress")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetIngressResponseObject); ok {
		if err := validResponse.VisitGetIngressResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIngressRecurrencePattern operation middleware
func (sh *strictHandler) DeleteIngressRecurrencePattern(w http.ResponseWriter, r *http.Request, id string, patternId string) {
	var request DeleteIngressRecurrencePatternRequestObject

	request.Id = id
	request.PatternId = patternId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIngressRecurrencePattern(ctx, request.(DeleteIngressRecurrencePatternRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIngressRecurrencePattern")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteIngressRecurrencePatternResponseObject); ok {
		if err := validResponse.VisitDeleteIngressRecurrencePatternResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetIngressRecurrencePattern operation middleware
func (sh *strictHandler) GetIngressRecurrencePattern(w http.ResponseWriter, r *http.Request, id string, patternId string) {
	var request GetIngressRecurrencePatternRequestObject

	request.Id = id
	request.PatternId = patternId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetIngressRecurrencePattern(ctx, request.(GetIngressRecurrencePatternRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIngressRecurrencePattern")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetIngressRecurrencePatternResponseObject); ok {
		if err := validResponse.VisitGetIngressRecurrencePatternResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateIngressRecurrencePattern operation middleware
func (sh *strictHandler) UpdateIngressRecurrencePattern(w http.ResponseWriter, r *http.Request, id string, patternId string) {
	var request UpdateIngressRecurrencePatternRequestObject

	request.Id = id
	request.PatternId = patternId

	var body UpdateIngressRecurrencePatternJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateIngressRecurrencePattern(ctx, request.(UpdateIngressRecurrencePatternRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateIngressRecurrencePattern")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateIngressRecurrencePatternResponseObject); ok {
		if err := validResponse.VisitUpdateIngressRecurrencePatternResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RollbackIngress operation middleware
func (sh *strictHandler) RollbackIngress(w http.ResponseWriter, r *http.Request, id string) {
	var request RollbackIngressRequestObject

	request.Id = id

	var body RollbackIngressJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RollbackIngress(ctx, request.(RollbackIngressRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RollbackIngress")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RollbackIngressResponseObject); ok {
		if err := validResponse.VisitRollbackIngressResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateIngressRecurrencePattern operation middleware
func (sh *strictHandler) CreateIngressRecurrencePattern(w http.ResponseWriter, r *http.Request) {
	var request CreateIngressRecurrencePatternRequestObject

	var body CreateIngressRecurrencePatternJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIngressRecurrencePattern(ctx, request.(CreateIngressRecurrencePatternRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIngressRecurrencePattern")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateIngressRecurrencePatternResponseObject); ok {
		if err := validResponse.VisitCreateIngressRecurrencePatternResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListSavingsGoals operation middleware
func (sh *strictHandler) ListSavingsGoals(w http.ResponseWriter, r *http.Request, params ListSavingsGoalsParams) {
	var request ListSavingsGoalsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListSavingsGoals(ctx, request.(ListSavingsGoalsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListSavingsGoals")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListSavingsGoalsResponseObject); ok {
		if err := validResponse.VisitListSavingsGoalsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSavingsGoal operation middleware
func (sh *strictHandler) CreateSavingsGoal(w http.ResponseWriter, r *http.Request) {
	var request CreateSavingsGoalRequestObject

	var body CreateSavingsGoalJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSavingsGoal(ctx, request.(CreateSavingsGoalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSavingsGoal")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateSavingsGoalResponseObject); ok {
		if err := validResponse.VisitCreateSavingsGoalResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSavingsGoal operation middleware
func (sh *strictHandler) DeleteSavingsGoal(w http.ResponseWriter, r *http.Request, id string) {
	var request DeleteSavingsGoalRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSavingsGoal(ctx, request.(DeleteSavingsGoalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSavingsGoal")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteSavingsGoalResponseObject); ok {
		if err := validResponse.VisitDeleteSavingsGoalResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSavingsGoal operation middleware
func (sh *strictHandler) GetSavingsGoal(w http.ResponseWriter, r *http.Request, id string) {
	var request GetSavingsGoalRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSavingsGoal(ctx, request.(GetSavingsGoalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSavingsGoal")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSavingsGoalResponseObject); ok {
		if err := validResponse.VisitGetSavingsGoalResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSavingsGoal operation middleware
func (sh *strictHandler) UpdateSavingsGoal(w http.ResponseWriter, r *http.Request, id string) {
	var request UpdateSavingsGoalRequestObject

	request.Id = id

	var body UpdateSavingsGoalJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSavingsGoal(ctx, request.(UpdateSavingsGoalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSavingsGoal")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateSavingsGoalResponseObject); ok {
		if err := validResponse.VisitUpdateSavingsGoalResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListSavingsContributions operation middleware
func (sh *strictHandler) ListSavingsContributions(w http.ResponseWriter, r *http.Request, id string, params ListSavingsContributionsParams) {
	var request ListSavingsContributionsRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListSavingsContributions(ctx, request.(ListSavingsContributionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListSavingsContributions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListSavingsContributionsResponseObject); ok {
		if err := validResponse.VisitListSavingsContributionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddSavingsContribution operation middleware
func (sh *strictHandler) AddSavingsContribution(w http.ResponseWriter, r *http.Request, id string) {
	var request AddSavingsContributionRequestObject

	request.Id = id

	var body AddSavingsContributionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddSavingsContribution(ctx, request.(AddSavingsContributionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddSavingsContribution")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddSavingsContributionResponseObject); ok {
		if err := validResponse.VisitAddSavingsContributionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSavingsProgress operation middleware
func (sh *strictHandler) GetSavingsProgress(w http.ResponseWriter, r *http.Request, id string) {
	var request GetSavingsProgressRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSavingsProgress(ctx, request.(GetSavingsProgressRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSavingsProgress")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSavingsProgressResponseObject); ok {
		if err := validResponse.VisitGetSavingsProgressResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListSavingsTransactions operation middleware
func (sh *strictHandler) ListSavingsTransactions(w http.ResponseWriter, r *http.Request, id string, params ListSavingsTransactionsParams) {
	var request ListSavingsTransactionsRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListSavingsTransactions(ctx, request.(ListSavingsTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListSavingsTransactions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListSavingsTransactionsResponseObject); ok {
		if err := validResponse.VisitListSavingsTransactionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListSavingsWithdrawals operation middleware
func (sh *strictHandler) ListSavingsWithdrawals(w http.ResponseWriter, r *http.Request, id string, params ListSavingsWithdrawalsParams) {
	var request ListSavingsWithdrawalsRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListSavingsWithdrawals(ctx, request.(ListSavingsWithdrawalsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListSavingsWithdrawals")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListSavingsWithdrawalsResponseObject); ok {
		if err := validResponse.VisitListSavingsWithdrawalsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddSavingsWithdrawal operation middleware
func (sh *strictHandler) AddSavingsWithdrawal(w http.ResponseWriter, r *http.Request, id string) {
	var request AddSavingsWithdrawalRequestObject

	request.Id = id

	var body AddSavingsWithdrawalJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddSavingsWithdrawal(ctx, request.(AddSavingsWithdrawalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddSavingsWithdrawal")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddSavingsWithdrawalResponseObject); ok {
		if err := validResponse.VisitAddSavingsWithdrawalResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTags operation middleware
func (sh *strictHandler) ListTags(w http.ResponseWriter, r *http.Request) {
	var request ListTagsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTags(ctx, request.(ListTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTagsResponseObject); ok {
		if err := validResponse.VisitListTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTag operation middleware
func (sh *strictHandler) CreateTag(w http.ResponseWriter, r *http.Request) {
	var request CreateTagRequestObject

	var body CreateTagJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTag(ctx, request.(CreateTagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTag")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateTagResponseObject); ok {
		if err := validResponse.VisitCreateTagResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTagsByType operation middleware
func (sh *strictHandler) ListTagsByType(w http.ResponseWriter, r *http.Request, pType TagType) {
	var request ListTagsByTypeRequestObject

	request.Type = pType

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTagsByType(ctx, request.(ListTagsByTypeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTagsByType")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTagsByTypeResponseObject); ok {
		if err := validResponse.VisitListTagsByTypeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTag operation middleware
func (sh *strictHandler) DeleteTag(w http.ResponseWriter, r *http.Request, id string) {
	var request DeleteTagRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTag(ctx, request.(DeleteTagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTag")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteTagResponseObject); ok {
		if err := validResponse.VisitDeleteTagResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTransactions operation middleware
func (sh *strictHandler) ListTransactions(w http.ResponseWriter, r *http.Request, params ListTransactionsParams) {
	var request ListTransactionsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTransactions(ctx, request.(ListTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTransactions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTransactionsResponseObject); ok {
		if err := validResponse.VisitListTransactionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTransfers operation middleware
func (sh *strictHandler) ListTransfers(w http.ResponseWriter, r *http.Request, params ListTransfersParams) {
	var request ListTransfersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTransfers(ctx, request.(ListTransfersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTransfers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTransfersResponseObject); ok {
		if err := validResponse.VisitListTransfersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTransfer operation middleware
func (sh *strictHandler) CreateTransfer(w http.ResponseWriter, r *http.Request) {
	var request CreateTransferRequestObject

	var body CreateTransferJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTransfer(ctx, request.(CreateTransferRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTransfer")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateTransferResponseObject); ok {
		if err := validResponse.VisitCreateTransferResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTransfer operation middleware
func (sh *strictHandler) GetTransfer(w http.ResponseWriter, r *http.Request, id string) {
	var request GetTransferRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTransfer(ctx, request.(GetTransferRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTransfer")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTransferResponseObject); ok {
		if err := validResponse.VisitGetTransferResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RollbackTransfer operation middleware
func (sh *strictHandler) RollbackTransfer(w http.ResponseWriter, r *http.Request, id string) {
	var request RollbackTransferRequestObject

	request.Id = id

	var body RollbackTransferJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RollbackTransfer(ctx, request.(RollbackTransferRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RollbackTransfer")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RollbackTransferResponseObject); ok {
		if err := validResponse.VisitRollbackTransferResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"R4Po/vP9/w8AAP//he+/im8WAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
